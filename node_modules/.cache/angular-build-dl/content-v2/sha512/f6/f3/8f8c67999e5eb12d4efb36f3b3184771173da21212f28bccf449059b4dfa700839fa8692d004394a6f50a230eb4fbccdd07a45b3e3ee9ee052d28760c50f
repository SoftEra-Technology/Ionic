{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./node_modules/@ionic/core/dist/esm lazy ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$ namespace object","./src/app/app.component.html","./node_modules/tslib/tslib.es6.js","./src/app/Service/DataBaseAdapter.ts","./src/app/Service/DataBaseHelper.ts","./src/app/Service/user-login.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.scss","./src/app/app.component.ts","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wqC;;;;;;;;;;;;AC3YA;AAAe,mI;;;;;;;;;;;;ACAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,+DAA+D;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;;AAEO;AACP;AACA,mBAAmB,sBAAsB;AACzC;AACA;;AAEO;AACP;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,4DAA4D,cAAc;AAC1E;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;;AAEO;AACP,mCAAmC,oCAAoC;AACvE;;AAEO;AACP;AACA;;AAEO;AACP,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;;AAEO;AACP,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM,gBAAgB;AACzC;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;;AAEO;AACP,4BAA4B,sBAAsB;AAClD;AACA;AACA;;AAEO;AACP,iDAAiD,QAAQ;AACzD,wCAAwC,QAAQ;AAChD,wDAAwD,QAAQ;AAChE;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA,iBAAiB,sFAAsF,aAAa,EAAE;AACtH,sBAAsB,gCAAgC,qCAAqC,0CAA0C,EAAE,EAAE,GAAG;AAC5I,2BAA2B,MAAM,eAAe,EAAE,YAAY,oBAAoB,EAAE;AACpF,sBAAsB,oGAAoG;AAC1H,6BAA6B,uBAAuB;AACpD,4BAA4B,wBAAwB;AACpD,2BAA2B,yDAAyD;AACpF;;AAEO;AACP;AACA,iBAAiB,4CAA4C,SAAS,EAAE,qDAAqD,aAAa,EAAE;AAC5I,yBAAyB,6BAA6B,oBAAoB,gDAAgD,gBAAgB,EAAE,KAAK;AACjJ;;AAEO;AACP;AACA;AACA,2GAA2G,sFAAsF,aAAa,EAAE;AAChN,sBAAsB,8BAA8B,gDAAgD,uDAAuD,EAAE,EAAE,GAAG;AAClK,4CAA4C,sCAAsC,UAAU,oBAAoB,EAAE,EAAE,UAAU;AAC9H;;AAEO;AACP,gCAAgC,uCAAuC,aAAa,EAAE,EAAE,OAAO,kBAAkB;AACjH;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,4CAA4C;AAC5C;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACpN2C;AACqB;AAChE,iDAAiD;AACU;AAOzD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAI9B,YACW,MAAc;IAErB,oCAAoC;IAC7B,QAAkB;QAIvB,uBAAuB;QACvB,yBAAyB;QACzB,wBAAwB;QACxB,KAAK;QACL,gCAAgC;QAChC,2DAA2D;QAC3D,8NAA8N;QAC9N,MAAM;QAdD,WAAM,GAAN,MAAM,CAAQ;QAGd,aAAQ,GAAR,QAAQ,CAAU;QAN7B,kBAAa,GAAU,aAAa;IAmB/B,CAAC;CAwpBT;;YAxqBsB,+DAAM;YAGJ,uDAAQ;;AARlB,mBAAmB;IAJjC,gEAAU,CAAC;QACR,UAAU,EAAE,MAAM;KACnB,CAAC;2EAOmB,+DAAM;QAGJ,uDAAQ;GARlB,mBAAmB,CA6qBjC;AA7qBiC;;;;;;;;;;;;;;;;;;;;ACVS;AACqB;AAEL;AAMzD,IAAa,cAAc,GAA3B,MAAa,cAAc;IAM1B,8BAA8B;IAE3B,YACU,QAAkB,EACnB,MAAc;QADb,aAAQ,GAAR,QAAQ,CAAU;QACnB,WAAM,GAAN,MAAM,CAAQ;QANhB,mBAAc,GAAU,aAAa,CAAC,CAAC,UAAU;QACnD,eAAU,GAAU,eAAe,CAAC;QAgCvC,0BAA0B;QAE1B,6BAA6B;QAC7B,SAAS;QACT,2BAA2B;QAC3B,6BAA6B;QAC7B,4BAA4B;QAC5B,SAAS;QACT,oCAAoC;QACpC,+DAA+D;QAC/D,kOAAkO;QAClO,UAAU;QAER,GAAG;QAET,sCAAsC;QACtC,yCAAyC;QACzC,+BAA+B;QAC7B,YAAO,GAAU,kFAAkF;YACpG,kHAAkH,CAAC;QAErH,aAAQ,GAAU,6GAA6G,CAAC;QAEhI,aAAQ,GAAU,wFAAwF;YACxG,uIAAuI;YACvI,mCAAmC,CAAC;QAEtC,eAAU,GAAU,0FAA0F;YAC5G,uHAAuH;YACvH,iIAAiI;YACjI,qCAAqC,CAAC;QAExC,gBAAW,GAAU,2FAA2F;YAC9G,yHAAyH;YACzH,yHAAyH,CAAC;QAE5H,uBAAkB,GAAU,kGAAkG;YAC5H,wIAAwI;YACxI,6DAA6D,CAAC;QAEhE,yBAAoB,GAAU,oGAAoG;YAChI,mIAAmI;YACnI,wEAAwE,CAAC;QAE3E,oCAA+B,GAAU,+GAA+G;YACtJ,4IAA4I,CAAC;QAE/I,uBAAkB,GAAU,kGAAkG;YAC5H,2IAA2I,CAAC;QAE9I,sBAAiB,GAAU,iGAAiG;YAC1H,qIAAqI;YACrI,2DAA2D,CAAC;QAE9D,uBAAkB,GAAU,kGAAkG;YAC5H,uIAAuI;YACvI,gDAAgD,CAAC;QAEnD,oBAAe,GAAU,+FAA+F;YACtH,6JAA6J,CAAC;QAEhK,qBAAgB,GAAU,gGAAgG;YACxH,kIAAkI;YAClI,8BAA8B,CAAC;QAEjC,uBAAkB,GAAU,iFAAiF;YAC3G,yHAAyH;YACzH,oIAAoI,CAAC;QAEvI,4BAAuB,GAAU,+FAA+F;YAC9H,uHAAuH;YACvH,kIAAkI;YAClI,uEAAuE,CAAC;QAE1E,8BAAyB,GAAU,iGAAiG;YAClI,yHAAyH;YACzH,sJAAsJ;YACtJ,8IAA8I,CAAC;QAEjJ,uCAAkC,GAAU,gFAAgF;YAC1H,wIAAwI;YACxI,yDAAyD,CAAC;QAE5D,qCAAgC,GAAU,8EAA8E;YACtH,4IAA4I;YAC5I,8FAA8F,CAAC;QAEjG,uCAAkC,GAAU,gFAAgF;YAC1H,kHAAkH;YAClH,gIAAgI,CAAC;QAEnI,kDAA6C,GAAU,2FAA2F;YAChJ,8IAA8I;YAC9I,mJAAmJ;YACnJ,uDAAuD,CAAC;QAE1D,qCAAgC,GAAU,8EAA8E;YACtH,gHAAgH;YAChH,qGAAqG,CAAC;QAExG,oCAA+B,GAAU,6EAA6E;YACpH,2IAA2I;YAC3I,yFAAyF,CAAC;QAE5F,mCAA8B,GAAU,4EAA4E;YAClH,mHAAmH;YACnH,6IAA6I;YAC7I,qFAAqF,CAAC;QAExF,yCAAoC,GAAU,kFAAkF;YAC9H,gJAAgJ;YAChJ,mIAAmI;YACnI,wIAAwI,CAAC;QAE3I,0CAAqC,GAAU,mFAAmF;YAChI,gJAAgJ;YAChJ,oIAAoI;YACpI,0KAA0K,CAAC;QAE7K,oBAAe,GAAU,8FAA8F;YACrH,uDAAuD,CAAC;QAE1D,8BAAyB,GAAU,uEAAuE;YACxG,gIAAgI,CAAC;QAjJ9H,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;YAC9B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACf,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IAEL,CAAC;IACD,QAAQ;QAEN,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YACjB,IAAI,EAAE,IAAI,CAAC,cAAc;YACzB,QAAQ,EAAE,SAAS;SACpB,CAAC;aACC,IAAI,CAAC,CAAC,EAAgB,EAAE,EAAE;YACzB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YACtC,KAAK,CAAC,oCAAoC,CAAC,CAAC;QAC9C,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,CAAC,EAAE;YACT,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IA8HP,2BAA2B;IAC3B,mDAAmD;IACnD,IAAI;IAII,QAAQ;QACb,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QACjC,uDAAuD;QACvD,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,6GAA6G,EAAC,EAAE,CAAC,CAAC;QAC9I,qEAAqE;QACrE,mCAAmC;QAEnC,KAAK;QACL,gBAAgB;QAChB,wCAAwC;QACxC,MAAM;QACN,uEAAuE;QACvE,qCAAqC;QAErC,KAAK;QACL,gBAAgB;QAChB,wCAAwC;QACxC,OAAO;QACP,4DAA4D;QAC5D,mEAAmE;QACnE,qEAAqE;QACrE,gFAAgF;QAChF,mEAAmE;QACnE,kEAAkE;QAClE,mEAAmE;QACnE,gEAAgE;QAChE,iEAAiE;QACjE,mEAAmE;QACnE,wEAAwE;QACxE,0EAA0E;QAC1E,iFAAiF;QACjF,mFAAmF;QACnF,8FAA8F;QAC9F,iFAAiF;QACjF,gFAAgF;QAChF,mFAAmF;QACnF,+EAA+E;QAC/E,qFAAqF;QACrF,sFAAsF;QACtF,gEAAgE;QAChE,0EAA0E;IAC9E,CAAC;CASA;;YAjNuB,uDAAQ;YACX,+DAAM;;AAVd,cAAc;IAH5B,gEAAU,CAAC;QACR,UAAU,EAAE,MAAM;KACnB,CAAC;2EAUsB,uDAAQ;QACX,+DAAM;GAVd,cAAc,CA0N1B;AA1N0B;;;;;;;;;;;;;;;;;;;ACTc;AACO;AAalD,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAE3B,YAAmB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QADzC,cAAS,GAAS,OAAO,CAAC;IAQxB,CAAC;IAED,gBAAgB,CAAC,EAAS;QAEtB,IAAI,CAAC,SAAS,GAAC,EAAE,CAAC;IAE1B,CAAC;IAED,eAAe;QAEb,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACzB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC1B,IAAG,IAAI,CAAC,SAAS,GAAC,WAAW,EAC7B;YACE,OAAO,IAAI;SACZ;QAED,IAAG,IAAI,CAAC,SAAS,GAAC,SAAS,EAC3B;YACE,OAAO,KAAK;SACb;QACD,IAAG,IAAI,CAAC,SAAS,GAAC,cAAc,EAChC;YACE,OAAO,KAAK;SACb;IAEL,CAAC;IAEC,aAAa,CAAC,IAAI;QAEpB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAe,8FAA8F,EAAE;YACvI,KAAK,EAAE,IAAI,CAAC,KAAK;YAClB,QAAQ,EAAE,IAAI,CAAC,YAAY;SAC9B,CAAC;IACF,CAAC;IAED,oBAAoB,CAAC,IAAI;QAE3B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,KAAK,GAAE,IAAI,GAAC,IAAI,CAAC,KAAK,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAO,oFAAoF,EAAE;YAEtH,KAAK,EAAE,IAAI,CAAC,KAAK;SACpB,CAAC;IACF,CAAC;CAKF;;YA3DgC,+DAAU;;AAF9B,gBAAgB;IAH5B,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;2EAG+B,+DAAU;GAF9B,gBAAgB,CA6D5B;AA7D4B;;;;;;;;;;;;;;;;;;;ACdY;AACiC;AAE1E,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE;IACnD,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,4KAA4B,CAAC,IAAI,CAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,EAAC;IAC9F;QACE,IAAI,EAAE,YAAY;QAClB,YAAY,EAAE,GAAG,EAAE,CAAC,4NAAwC,CAAC,IAAI,CAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC;KAC/F;CACF,CAAC;AAQF,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;CAAI;AAApB,gBAAgB;IAN5B,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,4DAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,kBAAkB,EAAE,iEAAiB,EAAE,CAAC;SACxE;QACD,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,gBAAgB,CAAI;AAAJ;;;;;;;;;;;;;AClB7B;AAAe,6GAA8C,+H;;;;;;;;;;;;;;;;;;;;;;;ACAnB;AAEA;AACqB;AACN;AACL;AACS;AACG;AAOhE,IAAa,YAAY,GAAzB,MAAa,YAAY;IAGvB,YACU,QAAkB,EAClB,YAA0B,EAC1B,SAAoB,EACrB,OAAgB,EAChB,YAA8B,EAC9B,MAAc;QALb,aAAQ,GAAR,QAAQ,CAAU;QAClB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,cAAS,GAAT,SAAS,CAAW;QACrB,YAAO,GAAP,OAAO,CAAS;QAChB,iBAAY,GAAZ,YAAY,CAAkB;QAC9B,WAAM,GAAN,MAAM,CAAQ;QARd,kBAAa,GAAU,aAAa,CAAC;QAa5C,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,aAAa;QACX,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;YAC9B,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;YAC9B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YACzB,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,IAAI,sBAAsB,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE;gBACtE,8CAA8C;gBAC9C,qDAAqD;gBACrD,yBAAyB;gBAE1B,OAAO,KAAK,CAAC;YACb,CAAC,CAAC,CAAC;YACH,sBAAsB,CAAC,WAAW,EAAE,CAAC;YAEtC,IAAI,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE;gBAChE,QAAQ,CAAC;gBACT,oCAAoC;gBACrC,kCAAkC;gBACjC,kDAAkD;gBAClD,IAAI,CAAC,YAAY,CAAC,SAAS,GAAC,MAAM,CAAC;gBACnC,uDAAuD;gBACvD,+DAA+D;gBAC/D,2CAA2C;gBAC3C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC/B,UAAU,CAAC,GAAG,EAAE;oBACd,iCAAiC;oBACjC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM;wBAC9B,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,IAAI,EAC1B;wBACA,8CAA8C;qBAC/C;gBACH,CAAC,EAAE,IAAI,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QAKL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAChC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YACjB,IAAI,EAAE,IAAI,CAAC,aAAa;YACxB,QAAQ,EAAE,SAAS;SACpB,CAAC;aACC,IAAI,CAAC,CAAC,EAAgB,EAAE,EAAE;YAEzB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YAEtB,KAAK,CAAC,yBAAyB,CAAC,CAAC;QACnC,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,CAAC,EAAE;YACT,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;CACJ;;YArEqB,uDAAQ;YACJ,4EAAY;YACf,sEAAS;YACZ,iEAAO;YACF,4EAAgB;YACtB,+DAAM;;AATZ,YAAY;IALxB,+DAAS,CAAC;QACT,QAAQ,EAAE,UAAU;QACpB,yMAAiC;;KAElC,CAAC;2EAKoB,uDAAQ;QACJ,4EAAY;QACf,sEAAS;QACZ,iEAAO;QACF,4EAAgB;QACtB,+DAAM;GATZ,YAAY,CAyExB;AAzEwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdgB;AACiB;AACL;AAEY;AACF;AACN;AAEV;AACS;AACA;AACK;AACK;AACd;AACF;AAElD,6DAA6D;AACA;AACN;AAkBvD,IAAa,SAAS,GAAtB,MAAa,SAAS;CAAG;AAAZ,SAAS;IAhBrB,8DAAQ,CAAC;QACR,YAAY,EAAE,CAAC,2DAAY,CAAC;QAC5B,eAAe,EAAE,EAAE;QACnB,OAAO,EAAE,CAAC,uEAAa,EAAC,qEAAgB,EAAE,0DAAW,CAAC,OAAO,EAAE,EAAE,oEAAgB,EAAE,mEAAmB,EAAC,2DAAW,CAAC;QACnH,SAAS,EAAE;YACT,sEAAS;YACT,6EAAgB;YAChB,6EAAmB;YACnB,uEAAc;YACd,4EAAY;YACZ,kEAAO;YACP,gEAAM;YACN,EAAE,OAAO,EAAE,kEAAkB,EAAE,QAAQ,EAAE,iEAAkB,EAAE;SAC9D;QACD,SAAS,EAAE,CAAC,2DAAY,CAAC;KAC1B,CAAC;GACW,SAAS,CAAG;AAAH;;;;;;;;;;;;;ACpCtB;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;;;ACfpB;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","var map = {\n\t\"./ion-action-sheet-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-action-sheet-ios.entry.js\",\n\t\t\"common\",\n\t\t0\n\t],\n\t\"./ion-action-sheet-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-action-sheet-md.entry.js\",\n\t\t\"common\",\n\t\t1\n\t],\n\t\"./ion-alert-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-alert-ios.entry.js\",\n\t\t\"common\",\n\t\t2\n\t],\n\t\"./ion-alert-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-alert-md.entry.js\",\n\t\t\"common\",\n\t\t3\n\t],\n\t\"./ion-app_8-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-app_8-ios.entry.js\",\n\t\t\"common\",\n\t\t4\n\t],\n\t\"./ion-app_8-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-app_8-md.entry.js\",\n\t\t\"common\",\n\t\t5\n\t],\n\t\"./ion-avatar_3-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-avatar_3-ios.entry.js\",\n\t\t\"common\",\n\t\t6\n\t],\n\t\"./ion-avatar_3-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-avatar_3-md.entry.js\",\n\t\t\"common\",\n\t\t7\n\t],\n\t\"./ion-back-button-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-back-button-ios.entry.js\",\n\t\t\"common\",\n\t\t8\n\t],\n\t\"./ion-back-button-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-back-button-md.entry.js\",\n\t\t\"common\",\n\t\t9\n\t],\n\t\"./ion-backdrop-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-backdrop-ios.entry.js\",\n\t\t10\n\t],\n\t\"./ion-backdrop-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-backdrop-md.entry.js\",\n\t\t11\n\t],\n\t\"./ion-button_2-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-button_2-ios.entry.js\",\n\t\t\"common\",\n\t\t12\n\t],\n\t\"./ion-button_2-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-button_2-md.entry.js\",\n\t\t\"common\",\n\t\t13\n\t],\n\t\"./ion-card_5-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-card_5-ios.entry.js\",\n\t\t\"common\",\n\t\t14\n\t],\n\t\"./ion-card_5-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-card_5-md.entry.js\",\n\t\t\"common\",\n\t\t15\n\t],\n\t\"./ion-checkbox-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-checkbox-ios.entry.js\",\n\t\t\"common\",\n\t\t16\n\t],\n\t\"./ion-checkbox-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-checkbox-md.entry.js\",\n\t\t\"common\",\n\t\t17\n\t],\n\t\"./ion-chip-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-chip-ios.entry.js\",\n\t\t\"common\",\n\t\t18\n\t],\n\t\"./ion-chip-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-chip-md.entry.js\",\n\t\t\"common\",\n\t\t19\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-col_3.entry.js\",\n\t\t20\n\t],\n\t\"./ion-datetime_3-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-datetime_3-ios.entry.js\",\n\t\t\"common\",\n\t\t21\n\t],\n\t\"./ion-datetime_3-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-datetime_3-md.entry.js\",\n\t\t\"common\",\n\t\t22\n\t],\n\t\"./ion-fab_3-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-fab_3-ios.entry.js\",\n\t\t\"common\",\n\t\t23\n\t],\n\t\"./ion-fab_3-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-fab_3-md.entry.js\",\n\t\t\"common\",\n\t\t24\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-img.entry.js\",\n\t\t25\n\t],\n\t\"./ion-infinite-scroll_2-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2-ios.entry.js\",\n\t\t\"common\",\n\t\t26\n\t],\n\t\"./ion-infinite-scroll_2-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2-md.entry.js\",\n\t\t\"common\",\n\t\t27\n\t],\n\t\"./ion-input-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-input-ios.entry.js\",\n\t\t\"common\",\n\t\t28\n\t],\n\t\"./ion-input-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-input-md.entry.js\",\n\t\t\"common\",\n\t\t29\n\t],\n\t\"./ion-item-option_3-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-item-option_3-ios.entry.js\",\n\t\t\"common\",\n\t\t30\n\t],\n\t\"./ion-item-option_3-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-item-option_3-md.entry.js\",\n\t\t\"common\",\n\t\t31\n\t],\n\t\"./ion-item_8-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-item_8-ios.entry.js\",\n\t\t\"common\",\n\t\t32\n\t],\n\t\"./ion-item_8-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-item_8-md.entry.js\",\n\t\t\"common\",\n\t\t33\n\t],\n\t\"./ion-loading-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-loading-ios.entry.js\",\n\t\t\"common\",\n\t\t34\n\t],\n\t\"./ion-loading-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-loading-md.entry.js\",\n\t\t\"common\",\n\t\t35\n\t],\n\t\"./ion-menu_3-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-menu_3-ios.entry.js\",\n\t\t\"common\",\n\t\t36\n\t],\n\t\"./ion-menu_3-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-menu_3-md.entry.js\",\n\t\t\"common\",\n\t\t37\n\t],\n\t\"./ion-modal-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-modal-ios.entry.js\",\n\t\t\"common\",\n\t\t38\n\t],\n\t\"./ion-modal-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-modal-md.entry.js\",\n\t\t\"common\",\n\t\t39\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js\",\n\t\t\"common\",\n\t\t40\n\t],\n\t\"./ion-popover-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-popover-ios.entry.js\",\n\t\t\"common\",\n\t\t41\n\t],\n\t\"./ion-popover-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-popover-md.entry.js\",\n\t\t\"common\",\n\t\t42\n\t],\n\t\"./ion-progress-bar-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-progress-bar-ios.entry.js\",\n\t\t\"common\",\n\t\t43\n\t],\n\t\"./ion-progress-bar-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-progress-bar-md.entry.js\",\n\t\t\"common\",\n\t\t44\n\t],\n\t\"./ion-radio_2-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-radio_2-ios.entry.js\",\n\t\t\"common\",\n\t\t45\n\t],\n\t\"./ion-radio_2-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-radio_2-md.entry.js\",\n\t\t\"common\",\n\t\t46\n\t],\n\t\"./ion-range-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-range-ios.entry.js\",\n\t\t\"common\",\n\t\t47\n\t],\n\t\"./ion-range-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-range-md.entry.js\",\n\t\t\"common\",\n\t\t48\n\t],\n\t\"./ion-refresher_2-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-refresher_2-ios.entry.js\",\n\t\t\"common\",\n\t\t49\n\t],\n\t\"./ion-refresher_2-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-refresher_2-md.entry.js\",\n\t\t\"common\",\n\t\t50\n\t],\n\t\"./ion-reorder_2-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-reorder_2-ios.entry.js\",\n\t\t\"common\",\n\t\t51\n\t],\n\t\"./ion-reorder_2-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-reorder_2-md.entry.js\",\n\t\t\"common\",\n\t\t52\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-ripple-effect.entry.js\",\n\t\t53\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-route_4.entry.js\",\n\t\t\"common\",\n\t\t54\n\t],\n\t\"./ion-searchbar-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-searchbar-ios.entry.js\",\n\t\t\"common\",\n\t\t55\n\t],\n\t\"./ion-searchbar-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-searchbar-md.entry.js\",\n\t\t\"common\",\n\t\t56\n\t],\n\t\"./ion-segment_2-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-segment_2-ios.entry.js\",\n\t\t\"common\",\n\t\t57\n\t],\n\t\"./ion-segment_2-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-segment_2-md.entry.js\",\n\t\t\"common\",\n\t\t58\n\t],\n\t\"./ion-select_3-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-select_3-ios.entry.js\",\n\t\t\"common\",\n\t\t59\n\t],\n\t\"./ion-select_3-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-select_3-md.entry.js\",\n\t\t\"common\",\n\t\t60\n\t],\n\t\"./ion-slide_2-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-slide_2-ios.entry.js\",\n\t\t61\n\t],\n\t\"./ion-slide_2-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-slide_2-md.entry.js\",\n\t\t62\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-spinner.entry.js\",\n\t\t\"common\",\n\t\t63\n\t],\n\t\"./ion-split-pane-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-split-pane-ios.entry.js\",\n\t\t64\n\t],\n\t\"./ion-split-pane-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-split-pane-md.entry.js\",\n\t\t65\n\t],\n\t\"./ion-tab-bar_2-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-tab-bar_2-ios.entry.js\",\n\t\t\"common\",\n\t\t66\n\t],\n\t\"./ion-tab-bar_2-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-tab-bar_2-md.entry.js\",\n\t\t\"common\",\n\t\t67\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-tab_2.entry.js\",\n\t\t\"common\",\n\t\t68\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-text.entry.js\",\n\t\t\"common\",\n\t\t69\n\t],\n\t\"./ion-textarea-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-textarea-ios.entry.js\",\n\t\t\"common\",\n\t\t70\n\t],\n\t\"./ion-textarea-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-textarea-md.entry.js\",\n\t\t\"common\",\n\t\t71\n\t],\n\t\"./ion-toast-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-toast-ios.entry.js\",\n\t\t\"common\",\n\t\t72\n\t],\n\t\"./ion-toast-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-toast-md.entry.js\",\n\t\t\"common\",\n\t\t73\n\t],\n\t\"./ion-toggle-ios.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-toggle-ios.entry.js\",\n\t\t\"common\",\n\t\t74\n\t],\n\t\"./ion-toggle-md.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-toggle-md.entry.js\",\n\t\t\"common\",\n\t\t75\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js\",\n\t\t76\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./node_modules/@ionic/core/dist/esm lazy recursive ^\\\\.\\\\/.*\\\\.entry\\\\.js$ include: \\\\.entry\\\\.js$ exclude: \\\\.system\\\\.entry\\\\.js$\";\nmodule.exports = webpackAsyncContext;","export default \"<ion-app>\\n  <ion-router-outlet></ion-router-outlet>\\n</ion-app>\\n\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\r\n//import {DataBaseHelper} from './DataBaseHelper'\r\nimport { Platform, ToastController } from '@ionic/angular';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n\r\n  export class getWritableDatabase\r\n{\r\n    database_name:string = \"AUDIT_DB.db\"\r\n    public database:SQLiteObject;\r\n    constructor(\r\n        public sqlite: SQLite, \r\n        \r\n        //public  dbHelper : DataBaseHelper,\r\n        public platform: Platform\r\n\r\n         ) { \r\n\r\n          // this.sqlite.create({\r\n          //   name: 'AUDIT_DB.db',\r\n          //   location: 'default'\r\n          // })\r\n          // .then((db: SQLiteObject) => {\r\n          //     this.database = db; //set the object to your own var\r\n          //     db.executeSql(\"CREATE TABLE USER_TB(_id integer primary key autoincrement,EMP_ID text not null, EMP_NAME text not null,EMAIL text not null,PASSWORD text not null,BU_ID integer not null,BU_NAME text not null);\", []);\r\n          // });\r\n\r\n         }\r\n\r\n           \r\n            // public Cursor fetchAllAudits() {\r\n            //     return database.query(\"AUDIT_TB\", new String[]{\"_id\", \"AUDIT_ID\", \"AUDIT_NAME\", \"AUDIT_TYPE_ID\", \"AUDIT_TYPE\", \"AUDIT_PT\", \"QUESTION_COUNT\"}, null, null, null, null, null);\r\n            // }\r\n        \r\n            // public long createAudit(String sAuditID, String sAuditName, String sAuditTypeId, String sAuditTyp, String sAuditStage, String sAuditPt, String sQuestionCnt) {\r\n            //     ContentValues initialValues = new ContentValues();\r\n            //     initialValues.put(\"AUDIT_ID\", sAuditID);\r\n            //     initialValues.put(\"AUDIT_NAME\", sAuditName);\r\n            //     initialValues.put(\"AUDIT_TYPE_ID\", sAuditTypeId);\r\n            //     initialValues.put(\"AUDIT_TYPE\", sAuditTyp);\r\n            //     initialValues.put(\"AUDIT_STAGE\", sAuditStage);\r\n            //     initialValues.put(\"AUDIT_PT\", sAuditPt);\r\n            //     initialValues.put(\"QUESTION_COUNT\", sQuestionCnt);\r\n            //     return database.insert(\"AUDIT_TB\", null, initialValues);\r\n            // }\r\n        \r\n            // public long createSection(String sAuditID, String sSectionId, String sParentSectionId, String sSectionName, String sSectionDesc,\r\n            //                           String sSectionOrder, String sSectionPt, String sTQuestionCnt, String sSQuestionCnt, String sCQuestionCnt) {\r\n            //     ContentValues initialValues = new ContentValues();\r\n            //     initialValues.put(\"AUDIT_ID\", sAuditID);\r\n            //     initialValues.put(\"SECTION_ID\", sSectionId);\r\n            //     initialValues.put(\"PARENT_SECTION_ID\", sParentSectionId);\r\n            //     initialValues.put(\"SECTION_NAME\", sSectionName);\r\n            //     initialValues.put(\"SECTION_DESC\", sSectionDesc);\r\n            //     initialValues.put(\"SECTION_ORDER\", sSectionOrder);\r\n            //     initialValues.put(\"SECTION_PT\", sSectionPt);\r\n            //     initialValues.put(\"T_QUESTION_COUNT\", sTQuestionCnt);\r\n            //     initialValues.put(\"S_QUESTION_COUNT\", sSQuestionCnt);\r\n            //     initialValues.put(\"C_QUESTION_COUNT\", sCQuestionCnt);\r\n            //     return database.insert(\"SECTION_TB\", null, initialValues);\r\n            // }\r\n        \r\n            // public long createQuestion(String sAuditID, String sSectionId, String sQuestionId, String sQuestionTypeId,\r\n            //                            String sQuestionName, String sQuestionType, String sQuestionOrder, String sIsCritical, String sQuestionMarks) {\r\n            //     ContentValues initialValues = new ContentValues();\r\n            //     initialValues.put(\"AUDIT_ID\", sAuditID);\r\n            //     initialValues.put(\"SECTION_ID\", sSectionId);\r\n            //     initialValues.put(\"QUESTION_ID\", sQuestionId);\r\n            //     initialValues.put(\"QUESTION_TYPE_ID\", sQuestionTypeId);\r\n            //     initialValues.put(\"QUESTION_NAME\", sQuestionName);\r\n            //     initialValues.put(\"QUESTION_TYPE\", sQuestionType);\r\n            //     initialValues.put(\"QUESTION_ORDER\", sQuestionOrder);\r\n            //     initialValues.put(\"IS_CRITICAL\", sIsCritical);\r\n            //     initialValues.put(\"QUESTION_MARKS\", sQuestionMarks);\r\n            //     return database.insert(\"QUESTION_TB\", null, initialValues);\r\n            // }\r\n        \r\n            // createQChoice(String sAuditId, String sSectionId, String sQuestionId, String sChoiceId, String sChoiceText, String sMarks, String sComntReq, String sIsNegative) {\r\n            //     String sql = \"\";\r\n            //     sql = \"INSERT INTO QUESTION_CHOICE_TB(AUDIT_ID,SECTION_ID,QUESTION_ID,CHOICE_ID,CHOICE_TEXT,POINTS,COMMENTS_REQUIRED,IS_NEGATIVE) \" +\r\n            //             \"VALUES(\" + sAuditId + \",\" + sSectionId + \",\" + sQuestionId + \",\" + sChoiceId + \",'\" + sChoiceText + \"',\" + sMarks + \",\" +\r\n            //             \"'\" + sComntReq + \"','\" + sIsNegative + \"')\";\r\n            //     database.execSQL(sql);\r\n            // }\r\n        \r\n            // public long createAttemptedAudit(String sAuditID, String sAuditName, String sStrCode, String sStrName, String sUserId, String sStrManager, String sAuditDt, String sAuditStatus, String sUniqueId, String sAuditFindings) {\r\n            //     ContentValues initialValues = new ContentValues();\r\n            //     initialValues.put(\"AUDIT_ID\", sAuditID);\r\n            //     initialValues.put(\"AUDIT_NAME\", sAuditName);\r\n            //     initialValues.put(\"STR_CODE\", sStrCode);\r\n            //     initialValues.put(\"STR_NAME\", sStrName);\r\n            //     initialValues.put(\"USER_ID\", sUserId);\r\n            //     initialValues.put(\"STR_MANAGER\", sStrManager);\r\n            //     initialValues.put(\"AUDIT_DT\", sAuditDt);\r\n            //     initialValues.put(\"AUDIT_STATUS\", sAuditStatus);\r\n            //     initialValues.put(\"UNIQUE_ID\", sUniqueId);\r\n            //     initialValues.put(\"AUDIT_FINDINGS\", sAuditFindings);\r\n            //     return database.insert(\"AUDIT_ATTEMPTED_TB\", null, initialValues);\r\n            // }\r\n        \r\n            // public Cursor fetchAttemptedAuditForStore(long lAuditId, String _sStoreCode) throws SQLException {\r\n            //     Cursor mCursor = database.query(true, \"AUDIT_ATTEMPTED_TB\", new String[]{\"ATTEMPTED_ID\", \"AUDIT_ID\", \"STR_CODE\", \"USER_ID\", \"STR_MANAGER\", \"AUDIT_DT\", \"AUDIT_STATUS\",\r\n            //             \"UNIQUE_ID\"}, \"AUDIT_ID=\" + lAuditId + \" AND STR_CODE='\" + _sStoreCode + \"' ORDER BY ATTEMPTED_ID DESC\", null, null, null, null, null);\r\n            //     if (mCursor != null) {\r\n            //         mCursor.moveToFirst();\r\n            //     }\r\n            //     return mCursor;\r\n            // }\r\n        \r\n            // createAttemptedSectionBySQL(long lAttemptedId, long lAuditId) {\r\n            //     database.execSQL(\"INSERT INTO AUDIT_ATTEMPTED_SECTION(ATTEMPTED_ID,AUDIT_ID,SECTION_ID,PARENT_SECTION_ID,SECTION_NAME,SECTION_DESC,SECTION_ORDER,SECTION_PT,\" +\r\n            //             \"T_QUESTION_COUNT,QUESTION_ANSWERED,S_QUESTION_COUNT,C_QUESTION_COUNT) SELECT \" + lAttemptedId + \",AUDIT_ID,SECTION_ID,PARENT_SECTION_ID,SECTION_NAME,\" +\r\n            //             \"SECTION_DESC,SECTION_ORDER,SECTION_PT,T_QUESTION_COUNT,'',S_QUESTION_COUNT,C_QUESTION_COUNT FROM SECTION_TB WHERE AUDIT_ID=\" + lAuditId);\r\n            // }\r\n        \r\n            // createAttemptedQuestionBySQL(long lAttemptedId, long lAuditId) {\r\n            //     database.execSQL(\"INSERT INTO AUDIT_ATTEMPTED_QUESTIONS(ATTEMPTED_ID,AUDIT_ID,SECTION_ID,QUESTION_ID,QUESTION_TYPE_ID,QUESTION_NAME,QUESTION_TYPE,QUESTION_ORDER,\" +\r\n            //             \"IS_CRITICAL,QUESTION_MARKS,MARKS_SCORED,QUESTION_STATUS,QUESTION_COMMENT,IMAGE_NAME,IS_INCLUDED,IMAGE_PUSHED) SELECT \" +\r\n            //             lAttemptedId + \",AUDIT_ID,SECTION_ID,QUESTION_ID,QUESTION_TYPE_ID,QUESTION_NAME,QUESTION_TYPE,QUESTION_ORDER,\" +\r\n            //             \"IS_CRITICAL,QUESTION_MARKS,0,'Open','','','Yes','Yes' FROM QUESTION_TB WHERE AUDIT_ID=\" + lAuditId);\r\n            // }\r\n        \r\n            // public Cursor fetchAttemptedSection(long lAttemptedId, long lAuditId) throws SQLException {\r\n            //     Cursor mCursor = database.rawQuery(\"SELECT B.SECTION_NAME AS P_SECTION_NAME,A.ATTEMPTED_ID,A.AUDIT_ID,A.SECTION_ID,A.PARENT_SECTION_ID,A.SECTION_NAME,A.SECTION_DESC,A.SECTION_ORDER,A.SECTION_PT,A.T_QUESTION_COUNT,\" +\r\n            //             \"((SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND SECTION_ID=A.SECTION_ID \" +\r\n            //             \"AND QUESTION_STATUS<>'Open')+(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID \" +\r\n            //             \"AND QUESTION_STATUS<>'Open' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID))) AS ATTEMPTQUESTION,\" +\r\n            //             \"(SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes') AS SECTION_MARKS,\" +\r\n            //             \"(IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+\" +\r\n            //             \"IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(\" +\r\n            //             \"SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS MARKS_SCORED FROM AUDIT_ATTEMPTED_SECTION A \" +\r\n            //             \"LEFT JOIN AUDIT_ATTEMPTED_SECTION B ON A.PARENT_SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID=B.ATTEMPTED_ID WHERE A.ATTEMPTED_ID=\" + lAttemptedId + \" AND A.S_QUESTION_COUNT>0\", null);\r\n            //     if (mCursor != null) {\r\n            //         mCursor.moveToFirst();\r\n            //     }\r\n            //     return mCursor;\r\n            // }\r\n        \r\n            // public Cursor fetchAttemptedOpenAuditByUser(String _sUserId) throws SQLException {\r\n            //     String sql = \"SELECT ATTEMPTED_ID,AUDIT_ID,AUDIT_NAME,STR_CODE,STR_NAME,USER_ID,STR_MANAGER,AUDIT_DT,AUDIT_STATUS,\" +\r\n            //             \"(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=t.ATTEMPTED_ID AND AUDIT_ID=t.AUDIT_ID) AS TOTALQUESTION,\" +\r\n            //             \"(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=t.ATTEMPTED_ID AND AUDIT_ID=t.AUDIT_ID AND QUESTION_STATUS<>'Open') AS ATTEMPTQUESTION,\" +\r\n            //             \"(SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=t.ATTEMPTED_ID AND IS_INCLUDED='Yes') AS AUDIT_POINTS,\" +\r\n            //             \"IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=t.ATTEMPTED_ID AND QUESTION_STATUS<>'Open'),0) MARKS_SCORED,\" +\r\n            //             \"UNIQUE_ID FROM AUDIT_ATTEMPTED_TB t WHERE USER_ID='\" + _sUserId + \"' AND AUDIT_STATUS='Open'\";\r\n        \r\n            //     Cursor mCursor = database.rawQuery(sql, null);\r\n            //     if (mCursor != null) {\r\n            //         mCursor.moveToFirst();\r\n            //     }\r\n            //     return mCursor;\r\n            // }\r\n        \r\n            // public Cursor fetchAttemptedAuditBySQL(long lAttemptedId, long lAuditId) {\r\n            //     String sql = \"SELECT AUDIT_ID,AUDIT_NAME,STR_CODE,STR_NAME,USER_ID,STR_MANAGER,AUDIT_DT,UNIQUE_ID FROM AUDIT_ATTEMPTED_TB \" +\r\n            //             \"WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId;\r\n        \r\n            //     Cursor mCursor = database.rawQuery(sql, null);\r\n            //     if (mCursor != null) {\r\n            //         mCursor.moveToFirst();\r\n            //     }\r\n            //     return mCursor;\r\n            // }\r\n        \r\n            // public Cursor fetchAttemptedSectionQuestionBySQL(String sType, long lAttemptedId, long lAuditId, long lId) throws SQLException {\r\n            //     String sql = \"\";\r\n        \r\n            //     if (\"Audit\".equals(sType)) {\r\n            //         sql = \"SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,B.QUESTION_ID,B.QUESTION_NAME,B.QUESTION_ORDER,B.QUESTION_TYPE_ID,\" +\r\n            //                 \"B.QUESTION_TYPE,B.QUESTION_COMMENT,B.IMAGE_NAME FROM AUDIT_ATTEMPTED_SECTION A,AUDIT_ATTEMPTED_QUESTIONS B \" +\r\n            //                 \"WHERE A.ATTEMPTED_ID=B.ATTEMPTED_ID AND A.AUDIT_ID=B.AUDIT_ID AND A.SECTION_ID=B.SECTION_ID \" +\r\n            //                 \"AND A.ATTEMPTED_ID=\" + lAttemptedId + \" AND A.AUDIT_ID=\" + lAuditId;\r\n            //     } else if (\"Section\".equals(sType)) {\r\n            //         sql = \"SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,B.QUESTION_ID,B.QUESTION_NAME,B.QUESTION_ORDER,B.QUESTION_TYPE_ID,\" +\r\n            //                 \"B.QUESTION_TYPE,B.QUESTION_COMMENT,B.IMAGE_NAME FROM AUDIT_ATTEMPTED_SECTION A,AUDIT_ATTEMPTED_QUESTIONS B \" +\r\n            //                 \"WHERE A.ATTEMPTED_ID=B.ATTEMPTED_ID AND A.AUDIT_ID=B.AUDIT_ID AND A.SECTION_ID=B.SECTION_ID \" +\r\n            //                 \"AND A.ATTEMPTED_ID=\" + lAttemptedId + \" AND A.AUDIT_ID=\" + lAuditId + \" AND A.SECTION_ID=\" + lId;\r\n            //     } else if (\"Question\".equals(sType)) {\r\n            //         sql = \"SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,B.QUESTION_ID,B.QUESTION_NAME,B.QUESTION_ORDER,B.QUESTION_TYPE_ID,\" +\r\n            //                 \"B.QUESTION_TYPE,B.QUESTION_COMMENT,B.IMAGE_NAME FROM AUDIT_ATTEMPTED_SECTION A,AUDIT_ATTEMPTED_QUESTIONS B \" +\r\n            //                 \"WHERE A.ATTEMPTED_ID=B.ATTEMPTED_ID AND A.AUDIT_ID=B.AUDIT_ID AND A.SECTION_ID=B.SECTION_ID \" +\r\n            //                 \"AND A.ATTEMPTED_ID=\" + lAttemptedId + \" AND A.AUDIT_ID=\" + lAuditId + \" AND B.QUESTION_ID=\" + lId;\r\n            //     } else {\r\n            //         sql = \"SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,B.QUESTION_ID,B.QUESTION_NAME,B.QUESTION_ORDER,B.QUESTION_TYPE_ID,\" +\r\n            //                 \"B.QUESTION_TYPE,B.QUESTION_COMMENT,B.IMAGE_NAME FROM AUDIT_ATTEMPTED_SECTION A,AUDIT_ATTEMPTED_QUESTIONS B \" +\r\n            //                 \"WHERE A.ATTEMPTED_ID=B.ATTEMPTED_ID AND A.AUDIT_ID=B.AUDIT_ID AND A.SECTION_ID=B.SECTION_ID \" +\r\n            //                 \"AND A.ATTEMPTED_ID=\" + lAttemptedId + \" AND A.AUDIT_ID=\" + lAuditId + \" AND 1=2\";\r\n            //     }\r\n        \r\n            //     Cursor mCursor = database.rawQuery(sql, null);\r\n            //     if (mCursor != null) {\r\n            //         mCursor.moveToFirst();\r\n            //     }\r\n            //     return mCursor;\r\n            // }\r\n        \r\n            // public Cursor fetchAttemptedCompletedAuditByUser(String _sUserId) throws SQLException {\r\n            //     String sql = \"SELECT ATTEMPTED_ID,AUDIT_ID,AUDIT_NAME,STR_CODE,STR_NAME,USER_ID,STR_MANAGER,AUDIT_DT,AUDIT_STATUS,\" +\r\n            //             \"(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=t.ATTEMPTED_ID AND AUDIT_ID=t.AUDIT_ID) AS TOTALQUESTION,\" +\r\n            //             \"(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=t.ATTEMPTED_ID AND AUDIT_ID=t.AUDIT_ID AND QUESTION_STATUS<>'Open') AS ATTEMPTQUESTION,\" +\r\n            //             \"(SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=t.ATTEMPTED_ID AND IS_INCLUDED='Yes') AS AUDIT_POINTS,\" +\r\n            //             \"IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=t.ATTEMPTED_ID AND QUESTION_STATUS<>'Open'),0) MARKS_SCORED,\" +\r\n            //             \"UNIQUE_ID FROM AUDIT_ATTEMPTED_TB t WHERE USER_ID='\" + _sUserId + \"' AND AUDIT_STATUS='Close'\";\r\n            //     Cursor mCursor = database.rawQuery(sql, null);\r\n            //     if (mCursor != null) {\r\n            //         mCursor.moveToFirst();\r\n            //     }\r\n            //     return mCursor;\r\n            // }\r\n        \r\n            // public Cursor fetchImageNotPushedAttemptedQuestionBySQL(long lAttemptedId, long lAuditId) {\r\n            //     String sql = \"SELECT AUDIT_ID,SECTION_ID,QUESTION_ID,0 AS KEY_FIELD_VALUE_ID,IMAGE_NAME FROM AUDIT_ATTEMPTED_QUESTIONS \" +\r\n            //             \"WHERE QUESTION_STATUS='Done' AND ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" AND IMAGE_PUSHED='No' AND IMAGE_NAME<>'' \" +\r\n            //             \"AND IMAGE_NAME<>'null' \" +\r\n            //             \"UNION \" +\r\n            //             \"SELECT Y.AUDIT_ID,Y.SECTION_ID,Y.QUESTION_ID,X.KEY_FIELD_VALUE_ID,X.IMAGE_NAME FROM AUDIT_ATTEMPTED_QUESTION_FIELD X,AUDIT_ATTEMPTED_QUESTIONS Y \" +\r\n            //             \"WHERE X.AUDIT_ID=Y.AUDIT_ID AND X.SECTION_ID=Y.SECTION_ID AND X.QUESTION_ID=Y.QUESTION_ID AND Y.QUESTION_STATUS='Done' \" +\r\n            //             \"AND X.IMAGE_NAME<>'' AND X.IMAGE_NAME<>'null' AND X.IMAGE_PUSHED='No' AND X.ATTEMPTED_ID=\" + lAttemptedId + \" AND X.AUDIT_ID=\" + lAuditId + \" \" +\r\n            //             \"UNION \" +\r\n            //             \"SELECT Y.AUDIT_ID,Y.SECTION_ID,Y.QUESTION_ID,X.VALUE_ID AS KEY_FIELD_VALUE_ID,X.IMAGE_NAME FROM AUDIT_ATTEMPTED_QUESTIONS_STANDATD_PREDEFINED X,AUDIT_ATTEMPTED_QUESTIONS Y \" +\r\n            //             \"WHERE X.AUDIT_ID=Y.AUDIT_ID AND X.SECTION_ID=Y.SECTION_ID AND X.QUESTION_ID=Y.QUESTION_ID AND Y.QUESTION_STATUS='Done' \" +\r\n            //             \"AND X.IMAGE_NAME<>'' AND X.IMAGE_NAME<>'null' AND X.IMAGE_PUSHED='No' AND X.ATTEMPTED_ID=\" + lAttemptedId + \" AND X.AUDIT_ID=\" + lAuditId;\r\n        \r\n            //     Cursor mCursor = database.rawQuery(sql, null);\r\n            //     if (mCursor != null) {\r\n            //         mCursor.moveToFirst();\r\n            //     }\r\n            //     return mCursor;\r\n            // }\r\n        \r\n            // public Cursor fetchAttemptedOpenAuditCount() {\r\n            //     Cursor mCursor = database.rawQuery(\"SELECT COUNT(*) AS CNT FROM AUDIT_ATTEMPTED_TB t WHERE AUDIT_STATUS='Open'\", null);\r\n            //     if (mCursor != null) {\r\n            //         mCursor.moveToFirst();\r\n            //     }\r\n            //     return mCursor;\r\n            // }\r\n        \r\n        //      deletAttemptedAuditById(int attemtedId) {\r\n        //         String sql = \"DELETE FROM AUDIT_ATTEMPTED_TB WHERE ATTEMPTED_ID=\" + attemtedId;\r\n        //         database.execSQL(sql);\r\n        \r\n        //         sql = \"DELETE FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID=\" + attemtedId;\r\n        //         database.execSQL(sql);\r\n        \r\n        //         sql = \"DELETE FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + attemtedId;\r\n        //         database.execSQL(sql);\r\n        \r\n        //         sql = \"DELETE FROM AUDIT_ATTEMPTED_RECIVING_QUESTIONS WHERE ATTEMPTED_ID=\" + attemtedId;\r\n        //         database.execSQL(sql);\r\n        \r\n        //         sql = \"DELETE FROM AUDIT_ATTEMPTED_QUESTIONS_CHOICE WHERE ATTEMPTED_ID=\" + attemtedId;\r\n        //         database.execSQL(sql);\r\n        \r\n        //         sql = \"DELETE FROM AUDIT_ATTEMPTED_QUESTIONS_OPTION WHERE ATTEMPTED_ID=\" + attemtedId;\r\n        //         database.execSQL(sql);\r\n        \r\n        //         sql = \"DELETE FROM AUDIT_ATTEMPTED_QUESTIONS_RANGE WHERE ATTEMPTED_ID=\" + attemtedId;\r\n        //         database.execSQL(sql);\r\n        \r\n        //         sql = \"DELETE FROM AUDIT_ATTEMPTED_QUESTION_FIELD WHERE ATTEMPTED_ID=\" + attemtedId;\r\n        //         database.execSQL(sql);\r\n        \r\n        //         sql = \"DELETE FROM AUDIT_ATTEMPTED_QUESTION_FIELD_VALUE WHERE ATTEMPTED_ID=\" + attemtedId;\r\n        //         database.execSQL(sql);\r\n        \r\n        //         sql = \"DELETE FROM AUDIT_ATTEMPTED_QUESTION_FIELD_CHOICE WHERE ATTEMPTED_ID=\" + attemtedId;\r\n        //         database.execSQL(sql);\r\n        \r\n        //         sql = \"DELETE FROM AUDIT_ATTEMPTED_IMAGES_TB WHERE ATTEMPTED_ID=\" + attemtedId;\r\n        //         database.execSQL(sql);\r\n        \r\n        //         sql = \"DELETE FROM AUDIT_ATTEMPTED_QUESTIONS_STANDATD WHERE ATTEMPTED_ID=\" + attemtedId;\r\n        //         database.execSQL(sql);\r\n        \r\n        //         sql = \"DELETE FROM AUDIT_ATTEMPTED_QUESTIONS_STANDATD_PREDEFINED WHERE ATTEMPTED_ID=\" + attemtedId;\r\n        //         database.execSQL(sql);\r\n        //     }\r\n        \r\n        //     public Cursor fetchAttemptedQuestionBySQL(long lAttemptedId, long lAuditId, long lSectionId) throws SQLException {\r\n        //         String sql = \"SELECT ATTEMPTED_ID,AUDIT_ID,SECTION_ID,QUESTION_ID,QUESTION_NAME,QUESTION_TYPE,QUESTION_TYPE_ID,QUESTION_ORDER,\" +\r\n        //                 \"CASE WHEN IS_INCLUDED='Yes' THEN QUESTION_MARKS ELSE 0 END AS QUESTION_MARKS,MARKS_SCORED,QUESTION_STATUS,QUESTION_COMMENT,IS_INCLUDED,IS_CRITICAL \" +\r\n        //                 \"FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" \" +\r\n        //                 \"AND SECTION_ID=\" + lSectionId + \" ORDER BY QUESTION_ORDER\";\r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor fetchAttemptedQuestionChoiceBySQL(long lAttemptedId, long lAuditId, long lQuestionId) throws SQLException {\r\n        //         String sql = \"SELECT A.ATTEMPTED_ID,A.AUDIT_ID,A.SECTION_ID,A.QUESTION_ID,A.CHOICE_ID,A.CHOICE_TEXT,A.POINTS,A.COMMENTS,A.CHOICE_VALUE,B.IMAGE_NAME \" +\r\n        //                 \"FROM AUDIT_ATTEMPTED_QUESTIONS_CHOICE A INNER JOIN AUDIT_ATTEMPTED_QUESTIONS B ON A.ATTEMPTED_ID=B.ATTEMPTED_ID AND A.AUDIT_ID=B.AUDIT_ID \" +\r\n        //                 \"AND A.SECTION_ID=B.SECTION_ID AND A.QUESTION_ID=B.QUESTION_ID WHERE A.ATTEMPTED_ID=\" + lAttemptedId + \" AND A.AUDIT_ID=\" + lAuditId + \" AND A.QUESTION_ID=\" + lQuestionId;\r\n        \r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor fetchAttemptedAuditPrevQuestionBySQL(long lAttemptedId, long lSectionId, long lAuditId, long lQuestionId) throws SQLException {\r\n        //         String sql = \"SELECT ATTEMPTED_ID,AUDIT_ID,SECTION_ID,QUESTION_ID,QUESTION_NAME,QUESTION_TYPE,QUESTION_TYPE_ID,\" +\r\n        //                 \"QUESTION_ORDER,QUESTION_MARKS,MARKS_SCORED,QUESTION_STATUS,QUESTION_COMMENT,IS_INCLUDED FROM AUDIT_ATTEMPTED_QUESTIONS \" +\r\n        //                 \"WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" AND SECTION_ID=\" + lSectionId + \" AND QUESTION_ORDER=(SELECT MAX(QUESTION_ORDER) FROM \" +\r\n        //                 \"AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND SECTION_ID=\" + lSectionId + \" AND AUDIT_ID=\" + lAuditId + \" AND QUESTION_ORDER<(SELECT QUESTION_ORDER \" +\r\n        //                 \"FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND SECTION_ID=\" + lSectionId + \" AND AUDIT_ID=\" + lAuditId + \" AND QUESTION_ID=\" + lQuestionId + \"))\";\r\n        \r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor fetchPrevAttemptedSection(long lAttemptedId, long lAuditId, long lSectionId) throws SQLException {\r\n        //         String sql = \"SELECT (SELECT QUESTION_ID FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" \" +\r\n        //                 \"AND SECTION_ID=A.SECTION_ID AND QUESTION_ORDER=(SELECT MAX(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" \" +\r\n        //                 \"AND AUDIT_ID=\" + lAuditId + \" AND SECTION_ID=A.SECTION_ID)) AS QUESTION_ID,A.SECTION_ID,A.SECTION_NAME,\" +\r\n        //                 \"(SELECT QUESTION_NAME FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" AND SECTION_ID=A.SECTION_ID \" +\r\n        //                 \"AND QUESTION_ORDER=(SELECT MAX(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" \" +\r\n        //                 \"AND SECTION_ID=A.SECTION_ID)) AS QUESTION_NAME,\" +\r\n        //                 \"(SELECT QUESTION_TYPE FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" AND SECTION_ID=A.SECTION_ID \" +\r\n        //                 \"AND QUESTION_ORDER=(SELECT MAX(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" \" +\r\n        //                 \"AND SECTION_ID=A.SECTION_ID)) AS QUESTION_TYPE FROM AUDIT_ATTEMPTED_SECTION A WHERE A.ATTEMPTED_ID=\" + lAttemptedId + \" \" +\r\n        //                 \"AND A.AUDIT_ID=\" + lAuditId + \" AND A.SECTION_ORDER=(SELECT MAX(SECTION_ORDER) FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID=\" + lAttemptedId + \" \" +\r\n        //                 \"AND AUDIT_ID=\" + lAuditId + \" AND SECTION_ORDER<(SELECT SECTION_ORDER FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID=\" + lAttemptedId + \" \" +\r\n        //                 \"AND AUDIT_ID=\" + lAuditId + \" AND SECTION_ID=\" + lSectionId + \"))\";\r\n        \r\n        \r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor fetchAttemptedAuditNextQuestionBySQL(long lAttemptedId, long lSectionId, long lAuditId, long lQuestionId) throws SQLException {\r\n        //         String sql = \"SELECT ATTEMPTED_ID,AUDIT_ID,SECTION_ID,QUESTION_ID,QUESTION_NAME,QUESTION_TYPE,QUESTION_TYPE_ID,\" +\r\n        //                 \"QUESTION_ORDER,QUESTION_MARKS,MARKS_SCORED,QUESTION_STATUS,QUESTION_COMMENT,IS_INCLUDED FROM AUDIT_ATTEMPTED_QUESTIONS \" +\r\n        //                 \"WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" AND SECTION_ID=\" + lSectionId + \" AND QUESTION_ORDER=(SELECT MIN(QUESTION_ORDER) FROM \" +\r\n        //                 \"AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND SECTION_ID=\" + lSectionId + \" AND AUDIT_ID=\" + lAuditId + \" AND QUESTION_ORDER>(SELECT QUESTION_ORDER \" +\r\n        //                 \"FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND SECTION_ID=\" + lSectionId + \" AND AUDIT_ID=\" + lAuditId + \" AND QUESTION_ID=\" + lQuestionId + \"))\";\r\n        \r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor fetchNextAttemptedSection(long lAttemptedId, long lAuditId, long lSectionId) throws SQLException {\r\n        //         /*String sql=\"SELECT (SELECT QUESTION_ID FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\"+lAttemptedId+\" AND AUDIT_ID=\"+lAuditId+\" \"+\r\n        //                 \"AND SECTION_ID=A.SECTION_ID AND QUESTION_ORDER=(SELECT MIN(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\"+lAttemptedId+\" \"+\r\n        //                 \"AND AUDIT_ID=\"+lAuditId+\" AND SECTION_ID=A.SECTION_ID)) AS QUESTION_ID,A.SECTION_ID,A.SECTION_NAME,\"+\r\n        //                 \"(SELECT QUESTION_NAME FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\"+lAttemptedId+\" AND AUDIT_ID=\"+lAuditId+\" AND SECTION_ID=A.SECTION_ID \"+\r\n        //                 \"AND QUESTION_ORDER=(SELECT MIN(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\"+lAttemptedId+\" AND AUDIT_ID=\"+lAuditId+\" \"+\r\n        //                 \"AND SECTION_ID=A.SECTION_ID)) AS QUESTION_NAME,\"+\r\n        //                 \"(SELECT QUESTION_TYPE FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\"+lAttemptedId+\" AND AUDIT_ID=\"+lAuditId+\" AND SECTION_ID=A.SECTION_ID \"+\r\n        //                 \"AND QUESTION_ORDER=(SELECT MIN(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\"+lAttemptedId+\" AND AUDIT_ID=\"+lAuditId+\" \"+\r\n        //                 \"AND SECTION_ID=A.SECTION_ID)) AS QUESTION_TYPE FROM AUDIT_ATTEMPTED_SECTION A WHERE A.ATTEMPTED_ID=\"+lAttemptedId+\" \"+\r\n        //                 \"AND A.AUDIT_ID=\"+lAuditId+\" AND A.SECTION_ORDER=(SELECT MIN(SECTION_ORDER) FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID=\"+lAttemptedId+\" \"+\r\n        //                 \"AND AUDIT_ID=\"+lAuditId+\" AND SECTION_ORDER>(SELECT SECTION_ORDER FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID=\"+lAttemptedId+\" \"+\r\n        //                 \"AND AUDIT_ID=\"+lAuditId+\" AND SECTION_ID=\"+lSectionId+\"))\";*/\r\n        //         String sql = \"SELECT (SELECT QUESTION_ID FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" \" +\r\n        //                 \"AND SECTION_ID=A.SECTION_ID AND QUESTION_ORDER=(SELECT MIN(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" \" +\r\n        //                 \"AND AUDIT_ID=\" + lAuditId + \" AND SECTION_ID=A.SECTION_ID)) AS QUESTION_ID,A.SECTION_ID,A.SECTION_NAME,\" +\r\n        //                 \"(SELECT QUESTION_NAME FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" AND SECTION_ID=A.SECTION_ID \" +\r\n        //                 \"AND QUESTION_ORDER=(SELECT MIN(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" \" +\r\n        //                 \"AND SECTION_ID=A.SECTION_ID)) AS QUESTION_NAME,\" +\r\n        //                 \"(SELECT QUESTION_TYPE FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" AND SECTION_ID=A.SECTION_ID \" +\r\n        //                 \"AND QUESTION_ORDER=(SELECT MIN(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" \" +\r\n        //                 \"AND SECTION_ID=A.SECTION_ID)) AS QUESTION_TYPE FROM AUDIT_ATTEMPTED_SECTION A WHERE A.ATTEMPTED_ID=\" + lAttemptedId + \" AND A.AUDIT_ID=\" + lAuditId + \" \" +\r\n        //                 \"AND A.SECTION_ORDER=(SELECT MIN(SECTION_ORDER) FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" \" +\r\n        //                 \"AND PARENT_SECTION_ID=(SELECT PARENT_SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" \" +\r\n        //                 \"AND SECTION_ID=\" + lSectionId + \") AND SECTION_ORDER>(SELECT SECTION_ORDER FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID=\" + lAttemptedId + \" \" +\r\n        //                 \"AND AUDIT_ID=\" + lAuditId + \" AND SECTION_ID=\" + lSectionId + \")) AND A.PARENT_SECTION_ID=(\" +\r\n        //                 \"SELECT PARENT_SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" \" +\r\n        //                 \"AND SECTION_ID=\" + lSectionId + \")\";\r\n        \r\n        \r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor fetchQuestionById(long lAuditId, long lSectionId, long lQuestionId) throws SQLException {\r\n        //         String _sql = \"\";\r\n        //         Cursor mCursor = database.rawQuery(\"SELECT _id,AUDIT_ID,SECTION_ID,QUESTION_ID,QUESTION_TYPE_ID,QUESTION_NAME,QUESTION_TYPE,QUESTION_ORDER,IS_CRITICAL,\" +\r\n        //                 \"QUESTION_MARKS,(SELECT COUNT(*) FROM QUESTION_TB WHERE AUDIT_ID=\" + lAuditId + \" AND SECTION_ID=\" + lSectionId + \") AS CNT FROM QUESTION_TB t \" +\r\n        //                 \"WHERE AUDIT_ID=\" + lAuditId + \" AND SECTION_ID=\" + lSectionId + \" AND QUESTION_ID=\" + lQuestionId, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor fetchQuestionBased(long lAuditId, long lSectionId, long lQuestionId) throws SQLException {\r\n        //         Cursor mCursor = database.query(true, \"QUESTION_STANDARD_TB\", new String[]{\"_id\", \"AUDIT_ID\", \"SECTION_ID\", \"QUESTION_ID\", \"STANDARD_ID\", \"STANDARD_TYPE\",\r\n        //                 \"MIN_RANGE\", \"MAX_RANGE\", \"FIX\", \"UOM\", \"FIELD_LABEL\", \"IS_PREDEFINED\"}, \"AUDIT_ID=\" + lAuditId + \" AND QUESTION_ID=\" + lQuestionId, null, null, null, null, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor fetchQuestionBasedValues(long lAuditId, long lSectionId, long lQuestionId, long lStandardId) throws SQLException {\r\n        //         String _sql = \"SELECT _id,AUDIT_ID,SECTION_ID,QUESTION_ID,STANDARD_ID,VALUE_ID,VALUE_NAME FROM QUESTION_STANDARD_PREDEFINED_TB \" +\r\n        //                 \"WHERE AUDIT_ID=\" + lAuditId + \" AND SECTION_ID=\" + lSectionId + \" AND QUESTION_ID=\" + lQuestionId + \" AND STANDARD_ID=\" + lStandardId;\r\n        //         Cursor mCursor = database.rawQuery(_sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor fetchQuestionChoice(long lAuditId, long lSectionId, long lQuestionId) throws SQLException {\r\n        //         Cursor mCursor = database.query(true, \"QUESTION_CHOICE_TB\", new String[]{\"_id\", \"AUDIT_ID\", \"SECTION_ID\", \"QUESTION_ID\", \"CHOICE_ID\", \"CHOICE_TEXT\", \"POINTS\", \"COMMENTS_REQUIRED\", \"IS_NEGATIVE\"}, \"AUDIT_ID=\" + lAuditId + \" AND QUESTION_ID=\" + lQuestionId, null, null, null, null, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        \r\n        //     executeSQL(String sql) {\r\n        //         database.execSQL(sql);\r\n        //     }\r\n        \r\n        //     public Cursor rawQuery(String sql) {\r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        \r\n        //     public Cursor fetchTopAttemptedSection(long lAttemptedId, long lAuditId) throws SQLException {\r\n        //         Cursor mCursor = database.rawQuery(\"SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,A.SECTION_PT,A.T_QUESTION_COUNT,\" +\r\n        //                 \"((SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND SECTION_ID=A.SECTION_ID AND QUESTION_STATUS<>'Open')+\" +\r\n        //                 \"(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND QUESTION_STATUS<>'Open' AND SECTION_ID IN(\" +\r\n        //                 \"SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID))) AS ATTEMPTQUESTION,\" +\r\n        //                 \"(IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+\" +\r\n        //                 \"IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(\" +\r\n        //                 \"SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS SECTION_MARKS,\" +\r\n        //                 \"(IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+\" +\r\n        //                 \"IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(\" +\r\n        //                 \"SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS MARKS_SCORED FROM AUDIT_ATTEMPTED_SECTION A \" +\r\n        //                 \"LEFT JOIN AUDIT_ATTEMPTED_SECTION B ON A.PARENT_SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID=B.ATTEMPTED_ID WHERE A.ATTEMPTED_ID=\" + lAttemptedId + \" AND A.PARENT_SECTION_ID=0 ORDER BY A.SECTION_ORDER\", null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor fetchSLAttemptedSection(long lAttemptedId, long lSectionId, long lAuditId) throws SQLException {\r\n        //         Cursor mCur = database.rawQuery(\"SELECT * FROM SECTION_TB WHERE AUDIT_ID=\" + lAuditId + \" AND PARENT_SECTION_ID=\" + lSectionId, null);\r\n        //         if (mCur != null) {\r\n        //             if (mCur.getCount() > 0) {\r\n        //                 Cursor mCursor = database.rawQuery(\"SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,A.SECTION_PT,A.T_QUESTION_COUNT,\" +\r\n        //                         \"((SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND SECTION_ID=A.SECTION_ID AND QUESTION_STATUS<>'Open')+\" +\r\n        //                         \"(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND QUESTION_STATUS<>'Open' AND SECTION_ID IN(\" +\r\n        //                         \"SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID))) AS ATTEMPTQUESTION,\" +\r\n        //                         \"(IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+\" +\r\n        //                         \"IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(\" +\r\n        //                         \"SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS SECTION_MARKS,\" +\r\n        //                         \"(IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+\" +\r\n        //                         \"IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(\" +\r\n        //                         \"SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS MARKS_SCORED FROM AUDIT_ATTEMPTED_SECTION A \" +\r\n        //                         \"LEFT JOIN AUDIT_ATTEMPTED_SECTION B ON A.PARENT_SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID=B.ATTEMPTED_ID WHERE A.ATTEMPTED_ID=\" + lAttemptedId + \" AND A.PARENT_SECTION_ID=\" + lSectionId + \" ORDER BY A.SECTION_ORDER\", null);\r\n        //                 if (mCursor != null) {\r\n        //                     mCursor.moveToFirst();\r\n        //                 }\r\n        //                 return mCursor;\r\n        //             } else {\r\n        //                 Cursor mCursor = database.rawQuery(\"SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,A.SECTION_PT,A.T_QUESTION_COUNT,\" +\r\n        //                         \"((SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND SECTION_ID=A.SECTION_ID AND QUESTION_STATUS<>'Open')+\" +\r\n        //                         \"(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND QUESTION_STATUS<>'Open' AND SECTION_ID IN(\" +\r\n        //                         \"SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID))) AS ATTEMPTQUESTION,\" +\r\n        //                         \"(IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+\" +\r\n        //                         \"IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(\" +\r\n        //                         \"SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS SECTION_MARKS,\" +\r\n        //                         \"(IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+\" +\r\n        //                         \"IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(\" +\r\n        //                         \"SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS MARKS_SCORED FROM AUDIT_ATTEMPTED_SECTION A \" +\r\n        //                         \"LEFT JOIN AUDIT_ATTEMPTED_SECTION B ON A.PARENT_SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID=B.ATTEMPTED_ID WHERE A.ATTEMPTED_ID=\" + lAttemptedId + \" AND A.SECTION_ID=\" + lSectionId + \" ORDER BY A.SECTION_ORDER\", null);\r\n        //                 if (mCursor != null) {\r\n        //                     mCursor.moveToFirst();\r\n        //                 }\r\n        //                 return mCursor;\r\n        //             }\r\n        //         } else {\r\n        //             Cursor mCursor = database.rawQuery(\"SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,A.SECTION_PT,A.T_QUESTION_COUNT,\" +\r\n        //                     \"((SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND SECTION_ID=A.SECTION_ID AND QUESTION_STATUS<>'Open')+\" +\r\n        //                     \"(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND QUESTION_STATUS<>'Open' AND SECTION_ID IN(\" +\r\n        //                     \"SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID))) AS ATTEMPTQUESTION,\" +\r\n        //                     \"(IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+\" +\r\n        //                     \"IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(\" +\r\n        //                     \"SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS SECTION_MARKS,\" +\r\n        //                     \"(IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+\" +\r\n        //                     \"IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(\" +\r\n        //                     \"SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS MARKS_SCORED FROM AUDIT_ATTEMPTED_SECTION A \" +\r\n        //                     \"LEFT JOIN AUDIT_ATTEMPTED_SECTION B ON A.PARENT_SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID=B.ATTEMPTED_ID WHERE A.ATTEMPTED_ID=\" + lAttemptedId + \" AND A.PARENT_SECTION_ID=\" + lSectionId + \" ORDER BY A.SECTION_ORDER\", null);\r\n        //             if (mCursor != null) {\r\n        //                 mCursor.moveToFirst();\r\n        //             }\r\n        //             return mCursor;\r\n        //         }\r\n        //     }\r\n        \r\n        //     public Cursor fetchGenericImageNotPushedAttemptedQuestionBySQL(long lAttemptedId, long lAuditId) {\r\n        //         String sql = \"SELECT AUDIT_ID,IMAGE_NAME FROM AUDIT_ATTEMPTED_IMAGES_TB WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" AND IMAGE_PUSHED='No' AND IMAGE_NAME<>'' \" +\r\n        //                 \"AND IMAGE_NAME<>'null'\";\r\n        \r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //    DeleteGenericImages(String sUniqueID, String sAttemptedId) {\r\n        //         return database.delete(\"AUDIT_ATTEMPTED_IMAGES_TB\", \"ATTEMPTED_ID=\" + sAttemptedId, null) > 0;\r\n        //     }\r\n        \r\n        //     SaveGenericImage(String sAttemptedId, String sUniqueID, String sAuditId, String sStoreId, String sImageNm, int i) {\r\n        //         String sql = \"\";\r\n        //         sql = \"INSERT INTO AUDIT_ATTEMPTED_IMAGES_TB(ATTEMPTED_ID,AUDIT_ID,STR_CODE,UNIQUE_ID,IMAGE_NAME,IMAGE_PUSHED) VALUES(\" + sAttemptedId + \",\" + sAuditId + \",\" +\r\n        //                 \"'\" + sStoreId + \"','\" + sUniqueID + \"','\" + sImageNm + \"','No')\";\r\n        //         database.execSQL(sql);\r\n        //     }\r\n        \r\n        //     UpdateAuditFindings(String sAttemptedId, String sUniqueID, String sAuditId, String sAuditFindings) {\r\n        //         String sql = \"\";\r\n        //         sql = \"UPDATE AUDIT_ATTEMPTED_TB SET AUDIT_FINDINGS='\" + sAuditFindings.replace(\"'\", \"''\") + \"' WHERE ATTEMPTED_ID=\" + sAttemptedId + \" \" +\r\n        //                 \"AND AUDIT_ID=\" + sAuditId + \" AND UNIQUE_ID='\" + sUniqueID + \"'\";\r\n        //         database.execSQL(sql);\r\n        //     }\r\n        \r\n        //     public Cursor GetAuditFindings(String sAttemptedId, String sUniqueID, String sAuditId) {\r\n        //         String sql = \"SELECT AUDIT_FINDINGS FROM AUDIT_ATTEMPTED_TB WHERE ATTEMPTED_ID=\" + sAttemptedId + \" AND AUDIT_ID=\" + sAuditId + \" AND UNIQUE_ID='\" + sUniqueID + \"'\";\r\n        \r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     createQStandard(String sAuditId, String sSectionId, String sQuestionId, String sStandardId, String sStandardTyp, String sMinRng, String sMaxRng, String sFix, String sUOM, String sFieldLbl, String sPreDefined) {\r\n        //         String sql = \"\";\r\n        //         sql = \"INSERT INTO QUESTION_STANDARD_TB(AUDIT_ID,SECTION_ID,QUESTION_ID,STANDARD_ID,STANDARD_TYPE,MIN_RANGE,MAX_RANGE,FIX,UOM,FIELD_LABEL,IS_PREDEFINED) \" +\r\n        //                 \"VALUES(\" + sAuditId + \",\" + sSectionId + \",\" + sQuestionId + \",\" + sStandardId + \",'\" + sStandardTyp + \"','\" + sMinRng + \"',\" +\r\n        //                 \"'\" + sMaxRng + \"','\" + sFix + \"','\" + sUOM + \"','\" + sFieldLbl + \"','\" + sPreDefined + \"')\";\r\n        //         database.execSQL(sql);\r\n        //     }\r\n        \r\n        //     createQStandardPreDefined(String sAuditId, String sSectionId, String sQuestionId, String sStandardId, String sValueId, String sValueNm) {\r\n        //         String sql = \"\";\r\n        //         sql = \"INSERT INTO QUESTION_STANDARD_PREDEFINED_TB(AUDIT_ID,SECTION_ID,QUESTION_ID,STANDARD_ID,VALUE_ID,VALUE_NAME) \" +\r\n        //                 \"VALUES(\" + sAuditId + \",\" + sSectionId + \",\" + sQuestionId + \",\" + sStandardId + \",\" + sValueId + \",'\" + sValueNm + \"')\";\r\n        //         database.execSQL(sql);\r\n        //     }\r\n        \r\n        //     public Cursor fetchAttemptedQuestionStandardBySQL(long lAttemptedId, long lAuditId, long lQuestionId) throws SQLException {\r\n        //         String sql = \"SELECT ATTEMPTED_ID,AUDIT_ID,SECTION_ID,QUESTION_ID,STANDARD_ID,FIELD_VALUE,COMMENTS,CHOICE_VALUE,POINTS,IMAGE_NAME,IMAGE_PUSHED FROM AUDIT_ATTEMPTED_QUESTIONS_STANDATD \" +\r\n        //                 \"WHERE ATTEMPTED_ID=\" + lAttemptedId + \" AND AUDIT_ID=\" + lAuditId + \" AND QUESTION_ID=\" + lQuestionId;\r\n        \r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor fetchAttemptedQuestionStandardValueBySQL(long lAttemptedId, long lAuditId, long lQuestionId, long lStandardId) throws SQLException {\r\n        //         String sql = \"SELECT ATTEMPTED_ID,AUDIT_ID,SECTION_ID,QUESTION_ID,QUESTION_NAME,STANDARD_ID,VALUE_ID,VALUE_NAME,VALUE_OBSERVED,POINTS,COMMENTS,\" +\r\n        //                 \"CHOICE_VALUE,IMAGE_NAME,IMAGE_PUSHED FROM AUDIT_ATTEMPTED_QUESTIONS_STANDATD_PREDEFINED WHERE ATTEMPTED_ID=\" + lAttemptedId + \" \" +\r\n        //                 \"AND AUDIT_ID=\" + lAuditId + \" AND QUESTION_ID=\" + lQuestionId + \" AND STANDARD_ID=\" + lStandardId;\r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor ChkAudit(String sAuditId) throws SQLException {\r\n        //         String sql = \"SELECT COUNT(*) AS CNT FROM AUDIT_TB WHERE AUDIT_ID=\" + sAuditId;\r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor ChkSection(String sAuditId, String sSectionId) throws SQLException {\r\n        //         String sql = \"SELECT COUNT(*) AS CNT FROM SECTION_TB WHERE AUDIT_ID=\" + sAuditId + \" AND SECTION_ID=\" + sSectionId;\r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor ChkQuestion(String sAuditId, String sSectionId, String sQuestionId) throws SQLException {\r\n        //         String sql = \"SELECT COUNT(*) AS CNT FROM QUESTION_TB WHERE AUDIT_ID=\" + sAuditId + \" AND SECTION_ID=\" + sSectionId + \" AND QUESTION_ID=\" + sQuestionId;\r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor ChkQuestionChoice(String sAuditId, String sSectionId, String sQuestionId, String sChoiceId) throws SQLException {\r\n        //         String sql = \"SELECT COUNT(*) AS CNT FROM QUESTION_CHOICE_TB WHERE AUDIT_ID=\" + sAuditId + \" AND SECTION_ID=\" + sSectionId + \" AND QUESTION_ID=\" + sQuestionId + \" AND CHOICE_ID=\" + sChoiceId;\r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor ChkQuestionStandard(String sAuditId, String sSectionId, String sQuestionId, String sStandardId) throws SQLException {\r\n        //         String sql = \"SELECT COUNT(*) AS CNT FROM QUESTION_STANDARD_TB WHERE AUDIT_ID=\" + sAuditId + \" AND SECTION_ID=\" + sSectionId + \" AND QUESTION_ID=\" + sQuestionId + \" AND STANDARD_ID=\" + sStandardId;\r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor ChkQuestionStandardPreDefined(String sAuditId, String sSectionId, String sQuestionId, String sStandardId, String sValueId) throws SQLException {\r\n        //         String sql = \"SELECT COUNT(*) AS CNT FROM QUESTION_STANDARD_PREDEFINED_TB WHERE AUDIT_ID=\" + sAuditId + \" AND SECTION_ID=\" + sSectionId +\r\n        //                 \" AND QUESTION_ID=\" + sQuestionId + \" AND STANDARD_ID=\" + sStandardId + \" AND VALUE_ID=\" + sValueId;\r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     public Cursor ChkAttemptAudit(String sAuditId) throws SQLException {\r\n        //         String sql = \"SELECT COUNT(*) AS CNT FROM AUDIT_ATTEMPTED_TB WHERE AUDIT_ID=\" + sAuditId;\r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        \r\n        //     createSection(String sAuditId) {\r\n        //         database.execSQL(\"INSERT INTO AUDIT_ATTEMPTED_SECTION(ATTEMPTED_ID,AUDIT_ID,SECTION_ID,PARENT_SECTION_ID,SECTION_NAME,SECTION_DESC,SECTION_ORDER,SECTION_PT,\" +\r\n        //                 \"T_QUESTION_COUNT,QUESTION_ANSWERED,S_QUESTION_COUNT,C_QUESTION_COUNT) SELECT B.ATTEMPTED_ID,B.AUDIT_ID,A.SECTION_ID,A.PARENT_SECTION_ID,A.SECTION_NAME,\" +\r\n        //                 \"A.SECTION_DESC,A.SECTION_ORDER,A.SECTION_PT,A.T_QUESTION_COUNT,'' AS QUESTION_ANSWERED,A.S_QUESTION_COUNT,A.C_QUESTION_COUNT FROM SECTION_TB A \" +\r\n        //                 \"INNER JOIN AUDIT_ATTEMPTED_TB B ON A.AUDIT_ID=B.AUDIT_ID \" +\r\n        //                 \"LEFT JOIN AUDIT_ATTEMPTED_SECTION C ON B.ATTEMPTED_ID=C.ATTEMPTED_ID AND B.AUDIT_ID=C.AUDIT_ID AND A.SECTION_ID=C.SECTION_ID \" +\r\n        //                 \"WHERE A.AUDIT_ID=\" + sAuditId + \" AND C.SECTION_ID IS NULL\");\r\n        //     }\r\n        //     createQuestion(String sAuditId) {\r\n        //         database.execSQL(\"INSERT INTO AUDIT_ATTEMPTED_QUESTIONS(ATTEMPTED_ID,AUDIT_ID,SECTION_ID,QUESTION_ID,QUESTION_TYPE_ID,QUESTION_NAME,QUESTION_TYPE,QUESTION_ORDER,\"+\r\n        //                 \"IS_CRITICAL,QUESTION_MARKS,MARKS_SCORED,QUESTION_STATUS,QUESTION_COMMENT,IMAGE_NAME,IS_INCLUDED,IMAGE_PUSHED) SELECT B.ATTEMPTED_ID,B.AUDIT_ID,A.SECTION_ID,\"+\r\n        //                 \"A.QUESTION_ID,A.QUESTION_TYPE_ID,A.QUESTION_NAME,A.QUESTION_TYPE,A.QUESTION_ORDER,A.IS_CRITICAL,A.QUESTION_MARKS,0 AS MARKS_SCORED,\"+\r\n        //                 \"'Open' AS QUESTION_STATUS,'' AS QUESTION_COMMENT,'' AS IMAGE_NAME,'Yes' AS IS_INCLUDED,'Yes' AS IMAGE_PUSHED FROM QUESTION_TB A \"+\r\n        //                 \"INNER JOIN AUDIT_ATTEMPTED_TB B ON A.AUDIT_ID=B.AUDIT_ID \"+\r\n        //                 \"LEFT JOIN AUDIT_ATTEMPTED_QUESTIONS C ON B.ATTEMPTED_ID=C.ATTEMPTED_ID AND B.AUDIT_ID=C.AUDIT_ID AND A.SECTION_ID=C.SECTION_ID AND A.QUESTION_ID=C.QUESTION_ID \"+\r\n        //                 \"WHERE A.AUDIT_ID=\"+sAuditId+\" AND C.QUESTION_ID IS NULL\");\r\n        //     }\r\n        //     public Cursor ValidateUser(String sUserId,String sPassword) {\r\n        //         String sql = \"SELECT COUNT(*) AS CNT FROM USER_TB WHERE EMP_ID='\"+sUserId+\"' AND PASSWORD='\"+sPassword+\"'\";\r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        //     public Cursor GetUsrDetails(String sUserId,String sPassword) {\r\n        //         String sql = \"SELECT * FROM USER_TB WHERE EMP_ID='\"+sUserId+\"' AND PASSWORD='\"+sPassword+\"'\";\r\n        //         Cursor mCursor = database.rawQuery(sql, null);\r\n        //         if (mCursor != null) {\r\n        //             mCursor.moveToFirst();\r\n        //         }\r\n        //         return mCursor;\r\n        //     }\r\n        // }\r\n        \r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\r\n\r\nimport { Platform, ToastController } from '@ionic/angular';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class DataBaseHelper\r\n  {\r\n    public database123:SQLiteObject;\r\n   \r\n    readonly database_name1:string = \"AUDIT_DB.db\"; // DB name\r\n  readonly table_name:string = \"myfreakytable\";\r\n   // this.database = cc.akshay()\r\n    \r\n      constructor(\r\n        private platform: Platform,\r\n        public sqlite: SQLite,\r\n        \r\n\r\n      )\r\n      {\r\n        this.platform.ready().then(() => {\r\n          this.createDB();\r\n         }).catch(error => {\r\n           console.log(error);\r\n        });\r\n        \r\n      }\r\n      createDB() {\r\n       \r\n        this.sqlite.create({\r\n          name: this.database_name1,\r\n          location: 'default'\r\n        })\r\n          .then((db: SQLiteObject) => {\r\n            this.database123 = db;\r\n            console.log(\"database Audit created\");\r\n            alert('freaky_datatable Database Created!');\r\n          })\r\n          .catch(e => {\r\n            alert(\"error \" + JSON.stringify(e))\r\n          });\r\n        }\r\n        // public sqlite: SQLite, \r\n         \r\n        //  public platform: Platform\r\n        //   ) { \r\n        //     this.sqlite.create({\r\n        //       name: 'AUDIT_DB.db',\r\n        //       location: 'default'\r\n        //     })\r\n        //     .then((db: SQLiteObject) => {\r\n        //         this.database = db; //set the object to your own var\r\n        //         db.executeSql(\"CREATE TABLE USER_TB(_id integer primary key autoincrement,EMP_ID text not null, EMP_NAME text not null,EMAIL text not null,PASSWORD text not null,BU_ID integer not null,BU_NAME text not null);\", []);\r\n        //     });\r\n             \r\n          //}\r\n         \r\n    //   DATABASE_NAME: String=\"AUDIT_DB\";\r\n    //   database_name:string = \"AUDIT_DB.db\"\r\n    //  DATABASE_VERSION: number=1;\r\n      USER_TB: String =\"CREATE TABLE USER_TB(_id integer primary key autoincrement,EMP_ID text not null,\" +\r\n     \"EMP_NAME text not null,EMAIL text not null,PASSWORD text not null,BU_ID integer not null,BU_NAME text not null);\";\r\n  \r\n   STORE_TB: String =\"CREATE TABLE STORE_TB(_id integer primary key autoincrement,STR_CODE text not null,STR_NAME text not null);\";\r\n  \r\n   AUDIT_TB: String =\"CREATE TABLE AUDIT_TB(_id integer primary key autoincrement,AUDIT_ID integer not null,\" +\r\n     \"AUDIT_NAME text not null,AUDIT_TYPE_ID integer not null,AUDIT_TYPE text not null,AUDIT_STAGE text not null,AUDIT_PT integer not null,\" +\r\n     \"QUESTION_COUNT integer not null);\";\r\n  \r\n   SECTION_TB: String =\"CREATE TABLE SECTION_TB(_id integer primary key autoincrement,AUDIT_ID integer not null,\" +\r\n     \"SECTION_ID integer not null,PARENT_SECTION_ID integer not null,SECTION_NAME text not null,SECTION_DESC text not null,\" +\r\n     \"SECTION_ORDER integer not null,SECTION_PT integer not null,T_QUESTION_COUNT integer not null,S_QUESTION_COUNT integer not null,\"+\r\n     \"C_QUESTION_COUNT integer not null);\";\r\n  \r\n   QUESTION_TB: String =\"CREATE TABLE QUESTION_TB(_id integer primary key autoincrement,AUDIT_ID integer not null,\" +\r\n     \"SECTION_ID integer not null,QUESTION_ID integer not null,QUESTION_TYPE_ID integer not null,QUESTION_NAME text not null,\" +\r\n     \"QUESTION_TYPE text not null,QUESTION_ORDER integer not null,IS_CRITICAL text not null,QUESTION_MARKS integer not null);\";\r\n  \r\n   QUESTION_CHOICE_TB: String =\"CREATE TABLE QUESTION_CHOICE_TB(_id integer primary key autoincrement,AUDIT_ID integer not null,\" +\r\n     \"SECTION_ID integer not null,QUESTION_ID integer not null,CHOICE_ID integer not null,CHOICE_TEXT text not null,POINTS integer not null,\" +\r\n     \"COMMENTS_REQUIRED text not null,IS_NEGATIVE text not null);\";\r\n  \r\n   QUESTION_STANDARD_TB: String =\"CREATE TABLE QUESTION_STANDARD_TB(_id integer primary key autoincrement,AUDIT_ID integer not null,\" +\r\n     \"SECTION_ID integer not null,QUESTION_ID integer not null,STANDARD_ID integer not null,STANDARD_TYPE text not null,MIN_RANGE text,\" +\r\n     \"MAX_RANGE text,FIX text,UOM text,FIELD_LABEL text,IS_PREDEFINED text);\";\r\n  \r\n   QUESTION_STANDARD_PREDEFINED_TB: String =\"CREATE TABLE QUESTION_STANDARD_PREDEFINED_TB(_id integer primary key autoincrement,AUDIT_ID integer not null,\" +\r\n     \"SECTION_ID integer not null,QUESTION_ID integer not null,STANDARD_ID integer not null,VALUE_ID integer not null,VALUE_NAME text not null);\";\r\n  \r\n   QUESTION_OPTION_TB: String =\"CREATE TABLE QUESTION_OPTION_TB(_id integer primary key autoincrement,AUDIT_ID integer not null,\" +\r\n     \"SECTION_ID integer not null,QUESTION_ID integer not null,OPTION_ID integer not null,OPTION_TEXT text not null,SCORABLE_FL text not null);\";\r\n  \r\n   QUESTION_RANGE_TB: String =\"CREATE TABLE QUESTION_RANGE_TB(_id integer primary key autoincrement,AUDIT_ID integer not null,\" +\r\n     \"SECTION_ID integer not null,QUESTION_ID integer not null,RANGE_ID integer not null,MIN_RANGE text not null,MAX_RANGE text not null,\" +\r\n     \"POINTS integer not null,COMMENTS_REQUIRED text not null);\";\r\n  \r\n   QUESTION_FIELDS_TB: String =\"CREATE TABLE QUESTION_FIELDS_TB(_id integer primary key autoincrement,AUDIT_ID integer not null,\" +\r\n     \"SECTION_ID integer not null,QUESTION_ID integer not null,FIELD_ID integer not null,FIELD_NAME text not null,FIELD_TYPE text not null,\" +\r\n     \"ISKEY text not null,ISSCORABLE text not null);\";\r\n  \r\n   FIELDS_VALUE_TB: String =\"CREATE TABLE FIELDS_VALUE_TB(_id integer primary key autoincrement,AUDIT_ID integer not null,\" +\r\n     \"SECTION_ID integer not null,QUESTION_ID integer not null,FIELD_ID integer not null,VALUE_ID not null,VALUE_NAME text not null,DEFAULT_VALUE text not null);\";\r\n  \r\n   FIELDS_CHOICE_TB: String =\"CREATE TABLE FIELDS_CHOICE_TB(_id integer primary key autoincrement,AUDIT_ID integer not null,\" +\r\n     \"SECTION_ID integer not null,QUESTION_ID integer not null,FIELD_ID integer not null,CHOICE_ID not null,CHOICE_TEXT text not null,\" +\r\n     \"CHOICE_PT integer not null);\";\r\n  \r\n   AUDIT_ATTEMPTED_TB: String =\"CREATE TABLE AUDIT_ATTEMPTED_TB(ATTEMPTED_ID integer primary key autoincrement,\" +\r\n     \"AUDIT_ID integer not null,AUDIT_NAME text not null,STR_CODE text not null,STR_NAME text not null,USER_ID text not null,\" +\r\n     \"STR_MANAGER text not null,AUDIT_DT text not null,AUDIT_STATUS text not null,UNIQUE_ID text not null,AUDIT_FINDINGS text not null);\";\r\n  \r\n   AUDIT_ATTEMPTED_SECTION: String =\"CREATE TABLE AUDIT_ATTEMPTED_SECTION(ATTEMPTED_ID integer not null,AUDIT_ID integer not null,\" +\r\n     \"SECTION_ID integer not null,PARENT_SECTION_ID integer not null,SECTION_NAME text not null,SECTION_DESC text not null,\"+\r\n     \"SECTION_ORDER integer not null,SECTION_PT integer not null,T_QUESTION_COUNT integer not null,QUESTION_ANSWERED integer not null,\"+\r\n     \"S_QUESTION_COUNT integer not null,C_QUESTION_COUNT integer not null);\";\r\n  \r\n   AUDIT_ATTEMPTED_QUESTIONS: String =\"CREATE TABLE AUDIT_ATTEMPTED_QUESTIONS(ATTEMPTED_ID integer not null,AUDIT_ID integer not null,\"+\r\n     \"SECTION_ID integer not null,QUESTION_ID integer not null,QUESTION_TYPE_ID integer not null,QUESTION_NAME text not null,\" +\r\n     \"QUESTION_TYPE text not null,QUESTION_ORDER integer not null,IS_CRITICAL text not null,QUESTION_MARKS integer not null,MARKS_SCORED integer not null,\" +\r\n     \"QUESTION_STATUS text not null,QUESTION_COMMENT text not null,IMAGE_NAME text not null,IS_INCLUDED text not null,IMAGE_PUSHED text not null);\";\r\n  \r\n   AUDIT_ATTEMPTED_RECIVING_QUESTIONS: String =\"CREATE TABLE AUDIT_ATTEMPTED_RECIVING_QUESTIONS(ATTEMPTED_ID integer not null,\" +\r\n     \"AUDIT_ID integer not null,SECTION_ID integer not null,QUESTION_ID integer not null,QUESTION_NAME text not null,UNLOAD_START_TIME text,\" +\r\n     \"UNLOAD_END_TIME text,VEHICLE_NO text,TEMPERATURE text);\";\r\n  \r\n   AUDIT_ATTEMPTED_QUESTIONS_CHOICE: String =\"CREATE TABLE AUDIT_ATTEMPTED_QUESTIONS_CHOICE(ATTEMPTED_ID integer not null,\" +\r\n     \"AUDIT_ID integer not null,SECTION_ID integer not null,QUESTION_ID integer not null,QUESTION_NAME text not null,CHOICE_ID integer not null,\" +\r\n     \"CHOICE_TEXT text not null,POINTS integer not null,COMMENTS text,CHOICE_VALUE text not null);\";\r\n  \r\n   AUDIT_ATTEMPTED_QUESTIONS_STANDATD: String =\"CREATE TABLE AUDIT_ATTEMPTED_QUESTIONS_STANDATD(ATTEMPTED_ID integer not null,\" +\r\n     \"AUDIT_ID integer not null,SECTION_ID integer not null,QUESTION_ID integer not null,STANDARD_ID integer not null,\" +\r\n     \"FIELD_VALUE text,COMMENTS text,CHOICE_VALUE text,POINTS integer not null,IMAGE_NAME text not null,IMAGE_PUSHED text not null);\";\r\n  \r\n   AUDIT_ATTEMPTED_QUESTIONS_STANDATD_PREDEFINED: String =\"CREATE TABLE AUDIT_ATTEMPTED_QUESTIONS_STANDATD_PREDEFINED(ATTEMPTED_ID integer not null,\" +\r\n     \"AUDIT_ID integer not null,SECTION_ID integer not null,QUESTION_ID integer not null,QUESTION_NAME text not null,STANDARD_ID integer not null,\" +\r\n     \"VALUE_ID integer not null,VALUE_NAME text not null,VALUE_OBSERVED text not null,POINTS integer not null,COMMENTS text,CHOICE_VALUE text not null,\" +\r\n     \"IMAGE_NAME text not null,IMAGE_PUSHED text not null);\";\r\n  \r\n   AUDIT_ATTEMPTED_QUESTIONS_OPTION: String =\"CREATE TABLE AUDIT_ATTEMPTED_QUESTIONS_OPTION(ATTEMPTED_ID integer not null,\" +\r\n     \"AUDIT_ID integer not null,SECTION_ID integer not null,QUESTION_ID integer not null,OPTION_ID integer not null,\" +\r\n     \"OPTION_TEXT text not null,OPTION_TEXT_VALUE text not null,POINTS integer not null,ISSCORABLE text);\";\r\n  \r\n   AUDIT_ATTEMPTED_QUESTIONS_RANGE: String =\"CREATE TABLE AUDIT_ATTEMPTED_QUESTIONS_RANGE(ATTEMPTED_ID integer not null,\" +\r\n     \"AUDIT_ID integer not null,SECTION_ID integer not null,QUESTION_ID integer not null,QUESTION_NAME text not null,RANGE_ID integer not null,\" +\r\n     \"MIN_RANGE text not null,MAX_RANGE text not null,POINTS integer not null,COMMENTS text);\";\r\n  \r\n   AUDIT_ATTEMPTED_QUESTION_FIELD: String =\"CREATE TABLE AUDIT_ATTEMPTED_QUESTION_FIELD(ATTEMPTED_ID integer not null,\" +\r\n     \"AUDIT_ID integer not null,SECTION_ID integer not null,QUESTION_ID integer not null,KEY_FIELD_ID integer not null,\" +\r\n     \"KEY_FIELD_NAME text not null,KEY_FIELD_TYPE text not null,ISKEY text not null,ISSCORABLE text not null,KEY_FIELD_VALUE_ID integer not null,\" +\r\n     \"KEY_FIELD_VALUE text not null,IMAGE_NAME text not null,IMAGE_PUSHED text not null);\";\r\n  \r\n   AUDIT_ATTEMPTED_QUESTION_FIELD_VALUE: String =\"CREATE TABLE AUDIT_ATTEMPTED_QUESTION_FIELD_VALUE(ATTEMPTED_ID integer not null,\" +\r\n     \"AUDIT_ID integer not null,SECTION_ID integer not null,QUESTION_ID integer not null,KEY_FIELD_ID integer not null,KEY_FIELD_NAME text not null,\" +\r\n     \"KEY_FIELD_VALUE_ID integer not null,KEY_FIELD_VALUE text not null,OTHER_FIELD_ID integer not null,OTHER_FIELD_NAME text not null,\" +\r\n     \"OTHER_FIELD_TYPE text not null,OTHER_FIELD_ISKEY text not null,OTHER_FIELD_VALUE_ID integer not null,OTHER_FIELD_VALUE text not null);\";\r\n  \r\n   AUDIT_ATTEMPTED_QUESTION_FIELD_CHOICE: String =\"CREATE TABLE AUDIT_ATTEMPTED_QUESTION_FIELD_CHOICE(ATTEMPTED_ID integer not null,\" +\r\n     \"AUDIT_ID integer not null,SECTION_ID integer not null,QUESTION_ID integer not null,KEY_FIELD_ID integer not null,KEY_FIELD_NAME text not null,\" +\r\n     \"KEY_FIELD_VALUE_ID integer not null,KEY_FIELD_VALUE text not null,CHOICE_FIELD_ID integer not null,CHOIC_FIELD_NAME text not null,\" +\r\n     \"CHOICE_FIELD_TYPE text not null,CHOICE_FIELD_ISKEY text not null,CHOICE_ID integer not null,CHOICE_TEXT text not null,CHOICE_PT integer not null,CHECKED Text not null);\";\r\n  \r\n   AUDIT_ERROR_LOG: String =\"CREATE TABLE AUDIT_ERROR_LOG(ID integer primary key autoincrement,SCREEN_NAME text not null,\"+\r\n     \"FUNCTION_NAME text not null,EXCEPTION text not null);\";\r\n  \r\n   AUDIT_ATTEMPTED_IMAGES_TB: String =\"CREATE TABLE AUDIT_ATTEMPTED_IMAGES_TB(ATTEMPTED_ID integer not null,\" +\r\n     \"AUDIT_ID integer not null,STR_CODE text not null,UNIQUE_ID text not null,IMAGE_NAME text not null,IMAGE_PUSHED text not null);\";\r\n  \r\n  // public DataBaseHelper(){\r\n  // (this.DATABASE_NAME,null,this.DATABASE_VERSION);\r\n  // }\r\n\r\n    \r\n  \r\n   public onCreate(): void{\r\n     console.log(\"oncreated function\");\r\n      //this.database.executeSql(this.USER_TB.toString(),[]);\r\n      this.database123.executeSql(\"CREATE TABLE STORE_TB(_id integer primary key autoincrement,STR_CODE text not null,STR_NAME text not null);\",[]);\r\n      // this.database.executeSql(this.AUDIT_TB.toString(),[]).then(() => {\r\n      //   alert('Table Store Created!');\r\n        \r\n      // })\r\n      // .catch(e => {\r\n      //   alert(\"error \" + JSON.stringify(e))\r\n      // });\r\n      // this.database.executeSql(this.SECTION_TB.toString(),[]).then(() => {\r\n      //   alert('Table section Created!');\r\n        \r\n      // })\r\n      // .catch(e => {\r\n      //   alert(\"error \" + JSON.stringify(e))\r\n      // });;\r\n      // this.database.executeSql(this.QUESTION_TB.toString(),[]);\r\n      // this.database.executeSql(this.QUESTION_CHOICE_TB.toString(),[]);\r\n      // this.database.executeSql(this.QUESTION_STANDARD_TB.toString(),[]);\r\n      // this.database.executeSql(this.QUESTION_STANDARD_PREDEFINED_TB.toString(),[]);\r\n      // this.database.executeSql(this.QUESTION_OPTION_TB.toString(),[]);\r\n      // this.database.executeSql(this.QUESTION_RANGE_TB.toString(),[]);\r\n      // this.database.executeSql(this.QUESTION_FIELDS_TB.toString(),[]);\r\n      // this.database.executeSql(this.FIELDS_VALUE_TB.toString(),[]);\r\n      // this.database.executeSql(this.FIELDS_CHOICE_TB.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ATTEMPTED_TB.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ATTEMPTED_SECTION.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ATTEMPTED_QUESTIONS.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ATTEMPTED_QUESTIONS_CHOICE.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ATTEMPTED_QUESTIONS_STANDATD.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ATTEMPTED_QUESTIONS_STANDATD_PREDEFINED.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ATTEMPTED_QUESTIONS_OPTION.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ATTEMPTED_QUESTIONS_RANGE.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ATTEMPTED_RECIVING_QUESTIONS.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ATTEMPTED_QUESTION_FIELD.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ATTEMPTED_QUESTION_FIELD_VALUE.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ATTEMPTED_QUESTION_FIELD_CHOICE.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ERROR_LOG.toString(),[]);\r\n      // this.database.executeSql(this.AUDIT_ATTEMPTED_IMAGES_TB.toString(),[]);\r\n  }\r\n  \r\n  \r\n  // public  onUpgrade(database, oldVersion : number, newVersion: number): void {\r\n  //   console.log(this.DATABASE_NAME,\"Upgrading database from version \"+oldVersion+\" to \"\r\n  //             +newVersion+\", which will destroy all old data\");\r\n  //     this.database.executeSql(\"DROP TABLE IF EXISTS todo\");\r\n  //     this.onCreate(database);\r\n  // }\r\n  }","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {UserData} from '../Model/UserMpdel'\nimport {UserResponce} from '../Model/UserResponce';\nimport { Observable} from 'rxjs';\n\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\nimport { Platform, ToastController } from '@ionic/angular';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserLoginService {\n  Connected: string=\"false\";\n  constructor(public httpClient: HttpClient\n   \n      \n    \n    ) { \n\n     \n    }\n\n    Connected_status(st:string)\n    {\n        this.Connected=st;\n        \n}\n\nCheckConnection():boolean\n{\n  console.log(\"inservice\");\n  console.log(this.Connected);\n    if(this.Connected=\"Connected\")\n    {\n      return true\n    }\n    \n    if(this.Connected=undefined)\n    {\n      return false\n    }\n    if(this.Connected=\"NotConnected\")\n    {\n      return false\n    }\n\n}\n\n  validate_user(item): Observable<UserResponce>\n  {\nconsole.log(item.EMAIL);\n    console.log(\"i am in function\");\n    return this.httpClient.post<UserResponce>('http://feedback.homeip.net:805/Audit/api/Master/AuditHandler.ashx?caller=AuthenticateAuditor', { \n       Email: item.EMAIL,\n      Password: item.USERPASSWORD\n  })\n  }\nEMPID: String;\n  Get_Audit_By_Auditor(item): Observable<JSON>\n  {\nconsole.log(item.EMAIL);\nthis.EMPID= \"00\"+item.EMAIL;\n    console.log(\"get Audit by Auditor\");\n    return this.httpClient.post<JSON>('http://feedback.homeip.net:805/Audit/api/Master/AuditHandler.ashx?caller=GetAudits', { \n     \n      EmpId: this.EMPID\n  })\n  }\n\n\n\n  \n}\n","import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\n  { path: 'home', loadChildren: () => import('./home/home.module').then( m => m.HomePageModule)},\n  {\n    path: 'dash-board',\n    loadChildren: () => import('./dash-board/dash-board.module').then( m => m.DashBoardPageModule)\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\n\nimport { Platform } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\nimport { Network } from '@ionic-native/network/ngx';\nimport {UserLoginService} from './Service/user-login.service'\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss']\n})\nexport class AppComponent {\n  readonly database_name:string = \"AUDIT_DB.db\"; \n  databaseObj: SQLiteObject;\n  constructor(\n    private platform: Platform,\n    private splashScreen: SplashScreen,\n    private statusBar: StatusBar,\n    public network: Network,\n    public LoginService: UserLoginService,\n    public sqlite: SQLite\n   \n\n    \n  ) {\n    this.initializeApp();\n  }\n\n  initializeApp() {\n    this.platform.ready().then(() => {\n      this.statusBar.styleDefault();\n      this.splashScreen.hide();\n      this.createDB();\n      let disconnectSubscription = this.network.onDisconnect().subscribe(() => {\n        //console.log('network was disconnected :-(');\n        //this.LoginService.Connected_status(\"NotConnected\");\n        // alert(\"disconnected\");\n        \n       return false;\n       });\n       disconnectSubscription.unsubscribe();\n       \n      let connectSubscription = this.network.onConnect().subscribe(() => {\n        debugger;\n        //console.log('network connected!');\n       // alert(\"device has connection\");\n        //this.LoginService.Connected_status(\"Connected\");\n        this.LoginService.Connected=\"true\";\n        // We just got a connection but we need to wait briefly\n        // before we determine the connection type. Might need to wait.\n        // prior to doing any api requests as well.\n        console.log(this.network.type);\n        setTimeout(() => {\n          //console.log(this.network.type);\n          if (this.network.type === 'wifi' ||\n            this.network.type === '4g' \n          ) {\n            //console.log('we got a connection, woohoo!');\n          }\n        }, 2500);\n      });\n\n\n\n\n    });\n  }\n\n  createDB() {\n    console.log(\"database created\");\n    this.sqlite.create({\n      name: this.database_name,\n      location: 'default'\n    })\n      .then((db: SQLiteObject) => {\n       \n        this.databaseObj = db;\n       \n        alert('audit Database Created!');\n      })\n      .catch(e => {\n        alert(\"error \" + JSON.stringify(e))\n      });\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\n\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport {UserLoginService} from './Service/user-login.service'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Network } from '@ionic-native/network/ngx';\nimport { SQLite } from '@ionic-native/sqlite/ngx';\nimport { SQLiteObject } from '@ionic-native/sqlite';\n//import { Platform, ToastController } from '@ionic/angular';\nimport {getWritableDatabase} from './Service/DataBaseAdapter'\nimport {DataBaseHelper} from './Service/DataBaseHelper'\n\n@NgModule({\n  declarations: [AppComponent],\n  entryComponents: [],\n  imports: [BrowserModule,HttpClientModule, IonicModule.forRoot(), AppRoutingModule, ReactiveFormsModule,FormsModule],\n  providers: [\n    StatusBar,\n    UserLoginService,\n    getWritableDatabase,\n    DataBaseHelper,\n    SplashScreen,\n    Network,\n    SQLite,\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":"webpack:///"}