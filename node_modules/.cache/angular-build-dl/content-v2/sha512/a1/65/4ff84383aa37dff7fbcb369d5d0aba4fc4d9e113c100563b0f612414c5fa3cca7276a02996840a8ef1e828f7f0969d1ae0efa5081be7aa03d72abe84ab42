(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"+plB":function(T,E,I){"use strict";I.r(E);var D=I("8Y7J");class A{}var t=I("pMnS"),S=I("MKJQ"),_=I("sZkV"),l=I("SVse"),e=I("6GXZ"),N=I("xoVG"),n=I("kwUn");class O{constructor(T,E,I,D,A,t){this.userService=T,this.router=E,this.network=I,this.platform=D,this.sqlite=A,this.activatedRoute=t,this.database_name="AUDIT_DB.db",this.show_Section=!1,this.show_Question=!1,this.myImgUrl="../../assets/red_lock_48.png",this.activatedRoute.queryParams.subscribe(T=>{console.log(JSON.parse(T.value)),this.Query_data=JSON.parse(T.value),console.log("list page"),console.log(this.Query_data.AttemptedId)}),this.platform.ready().then(()=>{this.createDB()}).catch(T=>{console.log(T)})}ngOnInit(){}createDB(){console.log("database created"),this.sqlite.create({name:this.database_name,location:"default"}).then(T=>{this.databaseObj=T,this.fetchAttemptedAuditForStore(Number(this.Query_data.AuditId),String(this.Query_data.Storeid)),this.fetchAttemptedSection(Number(this.Query_data.AttemptedId),Number(this.Query_data.AuditId))}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchAttemptedAuditForStore(T,E){this.databaseObj.executeSql("SELECT * from AUDIT_ATTEMPTED_TB where AUDIT_ID="+T+" AND STR_CODE='"+E+"' ORDER BY ATTEMPTED_ID DESC",[]).then(T=>{if(this.AttemptedAuditForStore=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.AttemptedAuditForStore.push(T.rows.item(E));console.log(this.AttemptedAuditForStore),this.AuditStore=this.AttemptedAuditForStore[0].STR_NAME,this.AuditDate=this.AttemptedAuditForStore[0].AUDIT_DT}}).catch(T=>{console.log("error "+JSON.stringify(T))})}fetchAttemptedSection(T,E){this.show_Section=!this.show_Section,this.databaseObj.executeSql("SELECT B.SECTION_NAME AS P_SECTION_NAME,A.ATTEMPTED_ID,A.AUDIT_ID,A.SECTION_ID,A.PARENT_SECTION_ID,A.SECTION_NAME,A.SECTION_DESC,A.SECTION_ORDER,A.SECTION_PT,A.T_QUESTION_COUNT,((SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND SECTION_ID=A.SECTION_ID AND QUESTION_STATUS<>'Open')+(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND QUESTION_STATUS<>'Open' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID))) AS ATTEMPTQUESTION,(SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes') AS SECTION_MARKS,(IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS MARKS_SCORED FROM AUDIT_ATTEMPTED_SECTION A LEFT JOIN AUDIT_ATTEMPTED_SECTION B ON A.PARENT_SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID=B.ATTEMPTED_ID WHERE A.ATTEMPTED_ID="+T+" AND A.S_QUESTION_COUNT>0",[]).then(T=>{if(this.AttemptedSection=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.AttemptedSection.push(T.rows.item(E));console.log(this.AttemptedSection)}}).catch(T=>{console.log("error "+JSON.stringify(T))})}fetchAttemptedAuditBySQL(T,E){this.databaseObj.executeSql("SELECT AUDIT_ID,AUDIT_NAME,STR_CODE,STR_NAME,USER_ID,STR_MANAGER,AUDIT_DT,UNIQUE_ID FROM AUDIT_ATTEMPTED_TB WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E,[]).then(T=>{if(this.AttemptedAuditBySQL=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.AttemptedAuditBySQL.push(T.rows.item(E));return this.AttemptedAuditBySQL}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchAttemptedSectionQuestionBySQL(T,E,I,D){if("Audit"==T?this.databaseObj.executeSql("SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,B.QUESTION_ID,B.QUESTION_NAME,B.QUESTION_ORDER,B.QUESTION_TYPE_ID,B.QUESTION_TYPE,B.QUESTION_COMMENT,B.IMAGE_NAME FROM AUDIT_ATTEMPTED_SECTION A,AUDIT_ATTEMPTED_QUESTIONS B WHERE A.ATTEMPTED_ID=B.ATTEMPTED_ID AND A.AUDIT_ID=B.AUDIT_ID AND A.SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID="+E+" AND A.AUDIT_ID="+I,[]).then(T=>{if(this.AttemptedSectionQuestionBySQL=[],console.log(T),T.rows.length>0)for(var E=0;E<T.rows.length;E++)this.AttemptedSectionQuestionBySQL.push(T.rows.item(E))}).catch(T=>{alert("error "+JSON.stringify(T))}):"Section"==T?this.databaseObj.executeSql("SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,B.QUESTION_ID,B.QUESTION_NAME,B.QUESTION_ORDER,B.QUESTION_TYPE_ID,B.QUESTION_TYPE,B.QUESTION_COMMENT,B.IMAGE_NAME FROM AUDIT_ATTEMPTED_SECTION A,AUDIT_ATTEMPTED_QUESTIONS B WHERE A.ATTEMPTED_ID=B.ATTEMPTED_ID AND A.AUDIT_ID=B.AUDIT_ID AND A.SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID="+E+" AND A.AUDIT_ID="+I+" AND A.SECTION_ID="+D,[]).then(T=>{if(this.AttemptedSectionQuestionBySQL=[],console.log(T),T.rows.length>0)for(var E=0;E<T.rows.length;E++)this.AttemptedSectionQuestionBySQL.push(T.rows.item(E))}).catch(T=>{alert("error "+JSON.stringify(T))}):"Question"==T?this.databaseObj.executeSql("SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,B.QUESTION_ID,B.QUESTION_NAME,B.QUESTION_ORDER,B.QUESTION_TYPE_ID,B.QUESTION_TYPE,B.QUESTION_COMMENT,B.IMAGE_NAME FROM AUDIT_ATTEMPTED_SECTION A,AUDIT_ATTEMPTED_QUESTIONS B WHERE A.ATTEMPTED_ID=B.ATTEMPTED_ID AND A.AUDIT_ID=B.AUDIT_ID AND A.SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID="+E+" AND A.AUDIT_ID="+I+" AND B.QUESTION_ID="+D,[]).then(T=>{if(this.AttemptedSectionQuestionBySQL=[],console.log(T),T.rows.length>0)for(var E=0;E<T.rows.length;E++)this.AttemptedSectionQuestionBySQL.push(T.rows.item(E))}).catch(T=>{alert("error "+JSON.stringify(T))}):this.databaseObj.executeSql("SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,B.QUESTION_ID,B.QUESTION_NAME,B.QUESTION_ORDER,B.QUESTION_TYPE_ID,B.QUESTION_TYPE,B.QUESTION_COMMENT,B.IMAGE_NAME FROM AUDIT_ATTEMPTED_SECTION A,AUDIT_ATTEMPTED_QUESTIONS B WHERE A.ATTEMPTED_ID=B.ATTEMPTED_ID AND A.AUDIT_ID=B.AUDIT_ID AND A.SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID="+E+" AND A.AUDIT_ID="+I+" AND 1=2",[]).then(T=>{if(this.AttemptedSectionQuestionBySQL=[],console.log(T),T.rows.length>0)for(var E=0;E<T.rows.length;E++)this.AttemptedSectionQuestionBySQL.push(T.rows.item(E))}).catch(T=>{alert("error "+JSON.stringify(T))}),this.AttemptedSectionQuestionBySQL.length>0)return this.AttemptedSectionQuestionBySQL}fetchAttemptedQuestionBySQL(T,E,I){this.show_Question=!this.show_Question,console.log(T),console.log("Entered in fetched question"),this.databaseObj.executeSql("SELECT ATTEMPTED_ID,AUDIT_ID,SECTION_ID,QUESTION_ID,QUESTION_NAME,QUESTION_TYPE,QUESTION_TYPE_ID,QUESTION_ORDER,CASE WHEN IS_INCLUDED='Yes' THEN QUESTION_MARKS ELSE 0 END AS QUESTION_MARKS,MARKS_SCORED,QUESTION_STATUS,QUESTION_COMMENT,IS_INCLUDED,IS_CRITICAL FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID="+I+" ORDER BY QUESTION_ORDER",[]).then(T=>{if(this.AttemptedQuestionBySQL=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.AttemptedQuestionBySQL.push(T.rows.item(E));return this.AttemptedQuestionBySQL}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchAttemptedQuestionChoiceBySQL(T,E,I){this.databaseObj.executeSql("SELECT A.ATTEMPTED_ID,A.AUDIT_ID,A.SECTION_ID,A.QUESTION_ID,A.CHOICE_ID,A.CHOICE_TEXT,A.POINTS,A.COMMENTS,A.CHOICE_VALUE,B.IMAGE_NAME FROM AUDIT_ATTEMPTED_QUESTIONS_CHOICE A INNER JOIN AUDIT_ATTEMPTED_QUESTIONS B ON A.ATTEMPTED_ID=B.ATTEMPTED_ID AND A.AUDIT_ID=B.AUDIT_ID AND A.SECTION_ID=B.SECTION_ID AND A.QUESTION_ID=B.QUESTION_ID WHERE A.ATTEMPTED_ID="+T+" AND A.AUDIT_ID="+E+" AND A.QUESTION_ID="+I,[]).then(T=>{if(this.AttemptedQuestionChoiceBySQL=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.AttemptedQuestionChoiceBySQL.push(T.rows.item(E));return this.AttemptedQuestionChoiceBySQL}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchAttemptedAuditPrevQuestionBySQL(T,E,I,D){this.databaseObj.executeSql("SELECT ATTEMPTED_ID,AUDIT_ID,SECTION_ID,QUESTION_ID,QUESTION_NAME,QUESTION_TYPE,QUESTION_TYPE_ID,QUESTION_ORDER,QUESTION_MARKS,MARKS_SCORED,QUESTION_STATUS,QUESTION_COMMENT,IS_INCLUDED FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+I+" AND SECTION_ID="+E+" AND QUESTION_ORDER=(SELECT MAX(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND SECTION_ID="+E+" AND AUDIT_ID="+I+" AND QUESTION_ORDER<(SELECT QUESTION_ORDER FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND SECTION_ID="+E+" AND AUDIT_ID="+I+" AND QUESTION_ID="+D+"))",[]).then(T=>{if(this.AttemptedAuditPrevQuestionBySQL=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.AttemptedAuditPrevQuestionBySQL.push(T.rows.item(E));return this.AttemptedAuditPrevQuestionBySQL}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchPrevAttemptedSection(T,E,I){this.databaseObj.executeSql("SELECT (SELECT QUESTION_ID FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID=A.SECTION_ID AND QUESTION_ORDER=(SELECT MAX(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID=A.SECTION_ID)) AS QUESTION_ID,A.SECTION_ID,A.SECTION_NAME,(SELECT QUESTION_NAME FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID=A.SECTION_ID AND QUESTION_ORDER=(SELECT MAX(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID=A.SECTION_ID)) AS QUESTION_NAME,(SELECT QUESTION_TYPE FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID=A.SECTION_ID AND QUESTION_ORDER=(SELECT MAX(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID=A.SECTION_ID)) AS QUESTION_TYPE FROM AUDIT_ATTEMPTED_SECTION A WHERE A.ATTEMPTED_ID="+T+" AND A.AUDIT_ID="+E+" AND A.SECTION_ORDER=(SELECT MAX(SECTION_ORDER) FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ORDER<(SELECT SECTION_ORDER FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID="+I+"))",[]).then(T=>{if(this.PrevAttemptedSection=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.PrevAttemptedSection.push(T.rows.item(E));return this.PrevAttemptedSection}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchAttemptedAuditNextQuestionBySQL(T,E,I,D){this.databaseObj.executeSql("SELECT ATTEMPTED_ID,AUDIT_ID,SECTION_ID,QUESTION_ID,QUESTION_NAME,QUESTION_TYPE,QUESTION_TYPE_ID,QUESTION_ORDER,QUESTION_MARKS,MARKS_SCORED,QUESTION_STATUS,QUESTION_COMMENT,IS_INCLUDED FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+I+" AND SECTION_ID="+E+" AND QUESTION_ORDER=(SELECT MIN(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND SECTION_ID="+E+" AND AUDIT_ID="+I+" AND QUESTION_ORDER>(SELECT QUESTION_ORDER FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND SECTION_ID="+E+" AND AUDIT_ID="+I+" AND QUESTION_ID="+D+"))",[]).then(T=>{if(this.AttemptedAuditNextQuestionBySQL=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.AttemptedAuditNextQuestionBySQL.push(T.rows.item(E));return this.AttemptedAuditNextQuestionBySQL}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchNextAttemptedSection(T,E,I){this.databaseObj.executeSql("SELECT (SELECT QUESTION_ID FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID=A.SECTION_ID AND QUESTION_ORDER=(SELECT MIN(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID=A.SECTION_ID)) AS QUESTION_ID,A.SECTION_ID,A.SECTION_NAME,(SELECT QUESTION_NAME FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID=A.SECTION_ID AND QUESTION_ORDER=(SELECT MIN(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID=A.SECTION_ID)) AS QUESTION_NAME,(SELECT QUESTION_TYPE FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID=A.SECTION_ID AND QUESTION_ORDER=(SELECT MIN(QUESTION_ORDER) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID=A.SECTION_ID)) AS QUESTION_TYPE FROM AUDIT_ATTEMPTED_SECTION A WHERE A.ATTEMPTED_ID="+T+" AND A.AUDIT_ID="+E+" AND A.SECTION_ORDER=(SELECT MIN(SECTION_ORDER) FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND PARENT_SECTION_ID=(SELECT PARENT_SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID="+I+") AND SECTION_ORDER>(SELECT SECTION_ORDER FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID="+I+")) AND A.PARENT_SECTION_ID=(SELECT PARENT_SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND SECTION_ID="+I+")",[]).then(T=>{if(this.NextAttemptedSection=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.NextAttemptedSection.push(T.rows.item(E));return this.NextAttemptedSection}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchQuestionById(T,E,I){this.databaseObj.executeSql("SELECT _id,AUDIT_ID,SECTION_ID,QUESTION_ID,QUESTION_TYPE_ID,QUESTION_NAME,QUESTION_TYPE,QUESTION_ORDER,IS_CRITICAL,QUESTION_MARKS,(SELECT COUNT(*) FROM QUESTION_TB WHERE AUDIT_ID="+T+" AND SECTION_ID="+E+") AS CNT FROM QUESTION_TB t WHERE AUDIT_ID="+T+" AND SECTION_ID="+E+" AND QUESTION_ID="+I,[]).then(T=>{if(this.QuestionById=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.QuestionById.push(T.rows.item(E));return this.QuestionById}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchQuestionBased(T,E,I){this.databaseObj.executeSql("SELECT *  FROM QUESTION_STANDARD_TBWHERE AUDIT_ID="+T+" AND QUESTION_ID="+I,[]).then(T=>{if(this.QuestionBased=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.QuestionBased.push(T.rows.item(E));return this.QuestionBased}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchQuestionBasedValues(T,E,I,D){this.databaseObj.executeSql("SELECT _id,AUDIT_ID,SECTION_ID,QUESTION_ID,STANDARD_ID,VALUE_ID,VALUE_NAME FROM QUESTION_STANDARD_PREDEFINED_TB WHERE AUDIT_ID="+T+" AND SECTION_ID="+E+" AND QUESTION_ID="+I+" AND STANDARD_ID="+D,[]).then(T=>{if(this.QuestionBasedValues=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.QuestionBasedValues.push(T.rows.item(E));return this.QuestionBasedValues}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchQuestionChoice(T,E,I){this.databaseObj.executeSql("SELECT * FROM QUESTION_CHOICE_TB WHERE AUDIT_ID="+T+" AND QUESTION_ID="+I,[]).then(T=>{if(this.QuestionBasedValues=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.QuestionChoice.push(T.rows.item(E));return this.QuestionChoice}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchTopAttemptedSection(T,E){this.databaseObj.executeSql("SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,A.SECTION_PT,A.T_QUESTION_COUNT,((SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND SECTION_ID=A.SECTION_ID AND QUESTION_STATUS<>'Open')+(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND QUESTION_STATUS<>'Open' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID))) AS ATTEMPTQUESTION,(IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS SECTION_MARKS,(IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS MARKS_SCORED FROM AUDIT_ATTEMPTED_SECTION A LEFT JOIN AUDIT_ATTEMPTED_SECTION B ON A.PARENT_SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID=B.ATTEMPTED_ID WHERE A.ATTEMPTED_ID="+T+" AND A.PARENT_SECTION_ID=0 ORDER BY A.SECTION_ORDER",[]).then(T=>{if(this.TopAttemptedSection=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.QuestionChoice.push(T.rows.item(E));return this.QuestionChoice}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchSLAttemptedSection(T,E,I){this.databaseObj.executeSql("SELECT * FROM SECTION_TB WHERE AUDIT_ID="+I+" AND PARENT_SECTION_ID="+E,[]).then(T=>{if(this.SLAttemptedSection_check=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.SLAttemptedSection_check.push(T.rows.item(E));return this.SLAttemptedSection_check}}).catch(T=>{alert("error "+JSON.stringify(T))}),null!=this.SLAttemptedSection_check?this.SLAttemptedSection_check.length>0?this.databaseObj.executeSql("SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,A.SECTION_PT,A.T_QUESTION_COUNT,((SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND SECTION_ID=A.SECTION_ID AND QUESTION_STATUS<>'Open')+(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND QUESTION_STATUS<>'Open' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID))) AS ATTEMPTQUESTION,(IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS SECTION_MARKS,(IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS MARKS_SCORED FROM AUDIT_ATTEMPTED_SECTION A LEFT JOIN AUDIT_ATTEMPTED_SECTION B ON A.PARENT_SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID=B.ATTEMPTED_ID WHERE A.ATTEMPTED_ID="+T+" AND A.PARENT_SECTION_ID="+E+" ORDER BY A.SECTION_ORDER",[]).then(T=>{if(this.SLAttemptedSection=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.SLAttemptedSection.push(T.rows.item(E));return this.SLAttemptedSection}}).catch(T=>{alert("error "+JSON.stringify(T))}):this.databaseObj.executeSql("SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,A.SECTION_PT,A.T_QUESTION_COUNT,((SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND SECTION_ID=A.SECTION_ID AND QUESTION_STATUS<>'Open')+(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND QUESTION_STATUS<>'Open' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID))) AS ATTEMPTQUESTION,(IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS SECTION_MARKS,(IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS MARKS_SCORED FROM AUDIT_ATTEMPTED_SECTION A LEFT JOIN AUDIT_ATTEMPTED_SECTION B ON A.PARENT_SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID=B.ATTEMPTED_ID WHERE A.ATTEMPTED_ID="+T+" AND A.SECTION_ID="+E+" ORDER BY A.SECTION_ORDER",[]).then(T=>{if(this.SLAttemptedSection=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.SLAttemptedSection.push(T.rows.item(E));return this.SLAttemptedSection}}).catch(T=>{alert("error "+JSON.stringify(T))}):this.databaseObj.executeSql("SELECT A.SECTION_ID,A.SECTION_NAME,A.SECTION_ORDER,A.SECTION_PT,A.T_QUESTION_COUNT,((SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND SECTION_ID=A.SECTION_ID AND QUESTION_STATUS<>'Open')+(SELECT COUNT(*) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND AUDIT_ID=A.AUDIT_ID AND QUESTION_STATUS<>'Open' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID))) AS ATTEMPTQUESTION,(IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+IFNULL((SELECT SUM(QUESTION_MARKS) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS SECTION_MARKS,(IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND SECTION_ID=A.SECTION_ID AND IS_INCLUDED='Yes'),0)+IFNULL((SELECT SUM(MARKS_SCORED) FROM AUDIT_ATTEMPTED_QUESTIONS WHERE ATTEMPTED_ID=A.ATTEMPTED_ID AND IS_INCLUDED='Yes' AND SECTION_ID IN(SELECT SECTION_ID FROM AUDIT_ATTEMPTED_SECTION WHERE PARENT_SECTION_ID=A.SECTION_ID)),0)) AS MARKS_SCORED FROM AUDIT_ATTEMPTED_SECTION A LEFT JOIN AUDIT_ATTEMPTED_SECTION B ON A.PARENT_SECTION_ID=B.SECTION_ID AND A.ATTEMPTED_ID=B.ATTEMPTED_ID WHERE A.ATTEMPTED_ID="+T+" AND A.PARENT_SECTION_ID="+E+" ORDER BY A.SECTION_ORDER",[]).then(T=>{if(this.SLAttemptedSection=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.SLAttemptedSection.push(T.rows.item(E));return this.SLAttemptedSection}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchGenericImageNotPushedAttemptedQuestionBySQL(T,E){this.databaseObj.executeSql("SELECT AUDIT_ID,IMAGE_NAME FROM AUDIT_ATTEMPTED_IMAGES_TB WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND IMAGE_PUSHED='No' AND IMAGE_NAME<>'' AND IMAGE_NAME<>'null'",[]).then(T=>{if(this.GenericImageNotPushedAttemptedQuestionBySQL=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.GenericImageNotPushedAttemptedQuestionBySQL.push(T.rows.item(E));return this.GenericImageNotPushedAttemptedQuestionBySQL}}).catch(T=>{alert("error "+JSON.stringify(T))})}DeleteGenericImages(T,E){this.databaseObj.executeSql("DELETE FROM AUDIT_ATTEMPTED_IMAGES_TB WHERE ATTEMPTED_ID="+E,[])}SaveGenericImage(T,E,I,D,A,t){this.databaseObj.executeSql("INSERT INTO AUDIT_ATTEMPTED_IMAGES_TB(ATTEMPTED_ID,AUDIT_ID,STR_CODE,UNIQUE_ID,IMAGE_NAME,IMAGE_PUSHED) VALUES("+T+","+I+",'"+D+"','"+E+"','"+A+"','No')",[]).then(()=>{}).catch(T=>{alert("error "+JSON.stringify(T))})}UpdateAuditFindings(T,E,I,D){this.databaseObj.executeSql("UPDATE AUDIT_ATTEMPTED_TB SET AUDIT_FINDINGS='"+D.replace("'","''")+"' WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+I+" AND UNIQUE_ID='"+E+"'",[]).then(()=>{}).catch(T=>{alert("error "+JSON.stringify(T))})}GetAuditFindings(T,E,I){this.databaseObj.executeSql("SELECT AUDIT_FINDINGS FROM AUDIT_ATTEMPTED_TB WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+I+" AND UNIQUE_ID='"+E+"'",[]).then(T=>{if(this.AuditFindings=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.AuditFindings.push(T.rows.item(E));return this.AuditFindings}}).catch(T=>{alert("error "+JSON.stringify(T))})}createQStandard(T,E,I,D,A,t,S,_,l,e,N){this.databaseObj.executeSql("INSERT INTO QUESTION_STANDARD_TB(AUDIT_ID,SECTION_ID,QUESTION_ID,STANDARD_ID,STANDARD_TYPE,MIN_RANGE,MAX_RANGE,FIX,UOM,FIELD_LABEL,IS_PREDEFINED) VALUES("+T+","+E+","+I+","+D+",'"+A+"','"+t+"','"+S+"','"+_+"','"+l+"','"+e+"','"+N+"')",[]).then(()=>{console.log("data inserted")}).catch(T=>{console.log("error "+JSON.stringify(T))})}createQStandardPreDefined(T,E,I,D,A,t){this.databaseObj.executeSql("INSERT INTO QUESTION_STANDARD_PREDEFINED_TB(AUDIT_ID,SECTION_ID,QUESTION_ID,STANDARD_ID,VALUE_ID,VALUE_NAME) VALUES("+T+","+E+","+I+","+D+","+A+",'"+t+"')",[]).then(()=>{}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchAttemptedQuestionStandardBySQL(T,E,I){this.databaseObj.executeSql("SELECT ATTEMPTED_ID,AUDIT_ID,SECTION_ID,QUESTION_ID,STANDARD_ID,FIELD_VALUE,COMMENTS,CHOICE_VALUE,POINTS,IMAGE_NAME,IMAGE_PUSHED FROM AUDIT_ATTEMPTED_QUESTIONS_STANDATD WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND QUESTION_ID="+I,[]).then(T=>{if(this.AttemptedQuestionStandardBySQL=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.AttemptedQuestionStandardBySQL.push(T.rows.item(E));return this.AttemptedQuestionStandardBySQL}}).catch(T=>{alert("error "+JSON.stringify(T))})}fetchAttemptedQuestionStandardValueBySQL(T,E,I,D){this.databaseObj.executeSql("SELECT ATTEMPTED_ID,AUDIT_ID,SECTION_ID,QUESTION_ID,QUESTION_NAME,STANDARD_ID,VALUE_ID,VALUE_NAME,VALUE_OBSERVED,POINTS,COMMENTS,CHOICE_VALUE,IMAGE_NAME,IMAGE_PUSHED FROM AUDIT_ATTEMPTED_QUESTIONS_STANDATD_PREDEFINED WHERE ATTEMPTED_ID="+T+" AND AUDIT_ID="+E+" AND QUESTION_ID="+I+" AND STANDARD_ID="+D,[]).then(T=>{if(this.AttemptedQuestionStandardValueBySQL=[],console.log(T),T.rows.length>0){for(var E=0;E<T.rows.length;E++)this.AttemptedQuestionStandardValueBySQL.push(T.rows.item(E));return this.AttemptedQuestionStandardValueBySQL}}).catch(T=>{alert("error "+JSON.stringify(T))})}}var u=I("iInd"),i=D.ob({encapsulation:0,styles:[[""]],data:{}});function s(T){return D.Hb(0,[(T()(),D.qb(0,0,null,null,11,"div",[],null,null,null,null,null)),(T()(),D.qb(1,0,null,null,10,"div",[],null,[[null,"click"]],(function(T,E,I){var D=!0;return"click"===E&&(D=!1!==T.component.fetchAttemptedSection(T.context.$implicit.ATTEMPTED_ID,T.context.$implicit.AUDIT_ID)&&D),D}),null,null)),(T()(),D.qb(2,0,null,null,9,"ion-item",[],null,null,null,S.s,S.h)),D.pb(3,49152,null,0,_.E,[D.h,D.k,D.x],null,null),(T()(),D.qb(4,0,null,0,7,"table",[],null,null,null,null,null)),(T()(),D.qb(5,0,null,null,6,"tbody",[],null,null,null,null,null)),(T()(),D.qb(6,0,null,null,5,"tr",[],null,null,null,null,null)),(T()(),D.qb(7,0,null,null,1,"td",[],null,null,null,null,null)),(T()(),D.qb(8,0,null,null,0,"img",[["height","25"],["src","../../assets/tablez.png"],["width","25"]],null,null,null,null,null)),(T()(),D.qb(9,0,null,null,1,"td",[],null,null,null,null,null)),(T()(),D.Gb(10,null,[" Audit: ",""])),(T()(),D.qb(11,0,null,null,0,"td",[],null,null,null,null,null))],null,(function(T,E){T(E,10,0,E.context.$implicit.AUDIT_NAME)}))}function U(T){return D.Hb(0,[(T()(),D.qb(0,0,null,null,8,"div",[],null,null,null,null,null)),(T()(),D.qb(1,0,null,null,7,"div",[["style","margin-left: 20px;"]],null,null,null,null,null)),(T()(),D.qb(2,0,null,null,6,"ion-item",[],null,null,null,S.s,S.h)),D.pb(3,49152,null,0,_.E,[D.h,D.k,D.x],null,null),(T()(),D.qb(4,0,null,0,0,"img",[["height","25"],["src","../../assets/red_lock_48.png"],["width","25"]],null,null,null,null,null)),(T()(),D.qb(5,0,null,0,1,"span",[["style","font-size: large;"]],null,null,null,null,null)),(T()(),D.Gb(6,null,["",""])),(T()(),D.qb(7,0,null,0,0,"br",[],null,null,null,null,null)),(T()(),D.Gb(8,0,[" Marks : "," \xa0\xa0\xa0 Scored(%): "," "]))],null,(function(T,E){T(E,6,0,E.context.$implicit.QUESTION_NAME),T(E,8,0,E.context.$implicit.QUESTION_MARKS,E.context.$implicit.MARKS_SCORED)}))}function o(T){return D.Hb(0,[(T()(),D.qb(0,0,null,null,2,"div",[],null,null,null,null,null)),(T()(),D.fb(16777216,null,null,1,null,U)),D.pb(2,278528,null,0,l.h,[D.L,D.I,D.q],{ngForOf:[0,"ngForOf"]},null)],(function(T,E){T(E,2,0,E.component.AttemptedQuestionBySQL)}),null)}function M(T){return D.Hb(0,[(T()(),D.qb(0,0,null,null,19,"div",[],null,null,null,null,null)),(T()(),D.qb(1,0,null,null,16,"div",[],null,[[null,"click"]],(function(T,E,I){var D=!0;return"click"===E&&(D=!1!==T.component.fetchAttemptedQuestionBySQL(T.context.$implicit.ATTEMPTED_ID,T.context.$implicit.AUDIT_ID,T.context.$implicit.SECTION_ID)&&D),D}),null,null)),(T()(),D.qb(2,0,null,null,15,"ion-item",[],null,null,null,S.s,S.h)),D.pb(3,49152,null,0,_.E,[D.h,D.k,D.x],null,null),(T()(),D.qb(4,0,null,0,13,"table",[],null,null,null,null,null)),(T()(),D.qb(5,0,null,null,12,"tbody",[],null,null,null,null,null)),(T()(),D.qb(6,0,null,null,7,"tr",[],null,null,null,null,null)),(T()(),D.qb(7,0,null,null,1,"td",[],null,null,null,null,null)),(T()(),D.qb(8,0,null,null,0,"img",[["height","25"],["src","../../assets/red_lock_48.png"],["width","25"]],null,null,null,null,null)),(T()(),D.qb(9,0,null,null,3,"td",[],null,null,null,null,null)),(T()(),D.qb(10,0,null,null,1,"span",[["style","font-size: large;"]],null,null,null,null,null)),(T()(),D.Gb(11,null,["",": ",""])),(T()(),D.Gb(12,null,[" ",""])),(T()(),D.qb(13,0,null,null,0,"td",[],null,null,null,null,null)),(T()(),D.qb(14,0,null,null,3,"tr",[],null,null,null,null,null)),(T()(),D.qb(15,0,null,null,1,"td",[],null,null,null,null,null)),(T()(),D.Gb(16,null,[""," Total Questions: "," Question Answered: "," Markes Scored(%): "," "])),(T()(),D.qb(17,0,null,null,0,"td",[],null,null,null,null,null)),(T()(),D.fb(16777216,null,null,1,null,o)),D.pb(19,16384,null,0,l.i,[D.L,D.I],{ngIf:[0,"ngIf"]},null)],(function(T,E){T(E,19,0,E.component.show_Question)}),(function(T,E){var I=E.component;T(E,11,0,E.context.$implicit.SECTION_NAME,E.context.$implicit.SECTION_DESC),T(E,12,0,I.AuditStore),T(E,16,0,I.AuditDate,E.context.$implicit.A.T_QUESTION_COUNT,E.context.$implicit.A.ATTEMPTQUESTION,E.context.$implicit.MARKS_SCORED)}))}function r(T){return D.Hb(0,[(T()(),D.qb(0,0,null,null,13,"ion-header",[],null,null,null,S.q,S.f)),D.pb(1,49152,null,0,_.y,[D.h,D.k,D.x],null,null),(T()(),D.qb(2,0,null,0,11,"div",[["style","background-color: black; align-content: center;"]],null,null,null,null,null)),(T()(),D.qb(3,0,null,null,10,"table",[["style","margin-left: 10px; margin-top: 5px; margin-bottom: 2px;"]],null,null,null,null,null)),(T()(),D.qb(4,0,null,null,9,"tbody",[],null,null,null,null,null)),(T()(),D.qb(5,0,null,null,8,"tr",[],null,null,null,null,null)),(T()(),D.qb(6,0,null,null,2,"td",[],null,null,null,null,null)),(T()(),D.qb(7,0,null,null,1,"span",[["style","margin-top:20px; margin-left: 5px; margin-top: 1px;"]],null,null,null,null,null)),(T()(),D.qb(8,0,null,null,0,"img",[["height","35"],["src","../../assets/tablez.png"],["width","35"]],null,null,null,null,null)),(T()(),D.qb(9,0,null,null,1,"td",[],null,null,null,null,null)),(T()(),D.Gb(-1,null,["\xa0"])),(T()(),D.qb(11,0,null,null,2,"td",[],null,null,null,null,null)),(T()(),D.qb(12,0,null,null,1,"span",[["style","color: white; margin-top: 1px;"]],null,null,null,null,null)),(T()(),D.Gb(-1,null,["Open Audit"])),(T()(),D.qb(14,0,null,null,5,"ion-content",[],null,null,null,S.n,S.c)),D.pb(15,49152,null,0,_.r,[D.h,D.k,D.x],null,null),(T()(),D.fb(16777216,null,0,1,null,s)),D.pb(17,278528,null,0,l.h,[D.L,D.I,D.q],{ngForOf:[0,"ngForOf"]},null),(T()(),D.fb(16777216,null,0,1,null,M)),D.pb(19,278528,null,0,l.h,[D.L,D.I,D.q],{ngForOf:[0,"ngForOf"]},null)],(function(T,E){var I=E.component;T(E,17,0,I.AttemptedAuditForStore),T(E,19,0,I.AttemptedSection)}),null)}function C(T){return D.Hb(0,[(T()(),D.qb(0,0,null,null,1,"app-list-audit",[],null,null,null,r,i)),D.pb(1,114688,null,0,O,[n.a,u.m,N.a,_.Cb,e.a,u.a],null,null)],(function(T,E){T(E,1,0)}),null)}var R=D.mb("app-list-audit",O,C,{},{},[]),h=I("s7LF");class a{}I.d(E,"ListAuditPageModuleNgFactory",(function(){return c}));var c=D.nb(A,[],(function(T){return D.zb([D.Ab(512,D.j,D.Y,[[8,[t.a,R]],[3,D.j],D.v]),D.Ab(4608,l.k,l.j,[D.s,[2,l.q]]),D.Ab(4608,h.n,h.n,[]),D.Ab(4608,_.a,_.a,[D.x,D.g]),D.Ab(4608,_.Ab,_.Ab,[_.a,D.j,D.p]),D.Ab(4608,_.Db,_.Db,[_.a,D.j,D.p]),D.Ab(1073742336,l.b,l.b,[]),D.Ab(1073742336,h.m,h.m,[]),D.Ab(1073742336,h.g,h.g,[]),D.Ab(1073742336,_.yb,_.yb,[]),D.Ab(1073742336,u.n,u.n,[[2,u.s],[2,u.m]]),D.Ab(1073742336,a,a,[]),D.Ab(1073742336,A,A,[]),D.Ab(1024,u.k,(function(){return[[{path:"",component:O}]]}),[])])}))}}]);